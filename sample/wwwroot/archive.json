{
  "Options": {
    "AboutPageTitle": "About",
    "AdminNamespaces": [
      "System"
    ],
    "CategoriesTitle": "Categories",
    "CategoryNamespace": "Category",
    "ContactPageTitle": null,
    "ContentsPageTitle": null,
    "CopyrightPageTitle": null,
    "CustomAdminNamespaces": null,
    "CustomReservedNamespaces": null,
    "DefaultAnonymousPermission": 1,
    "DefaultNamespace": "Wiki",
    "DefaultRegisteredPermission": 63,
    "DefaultTableOfContentsDepth": 3,
    "DefaultTableOfContentsTitle": "Contents",
    "FileNamespace": "File",
    "GroupNamespace": "Group",
    "HelpPageTitle": "Help",
    "LinkTemplate": "onmousemove=\u0022wikiblazor.showPreview(event, \u0027{LINK}\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022",
    "MainPageTitle": "Main",
    "MaxFileSize": 0,
    "MaxFileSizeString": "0 bytes",
    "MinimumTableOfContentsHeadings": 3,
    "PolicyPageTitle": null,
    "ReservedNamespaces": [
      "File",
      "Talk"
    ],
    "ScriptNamespace": "Script",
    "SiteName": "a Tavenem wiki",
    "SystemNamespace": "System",
    "TalkNamespace": "Talk",
    "TransclusionNamespace": "Transclusion",
    "UserNamespace": "User",
    "UserDomains": false,
    "WikiLinkPrefix": "Wiki"
  },
  "Messages": null,
  "Pages": [
    {
      "$type": ":Article:",
      "id": "496d70c1-b539-499e-bcbc-c5fa7e7e8e2b",
      "AllowedEditorGroups": null,
      "AllowedEditors": [
        "c6798a76-7831-4675-959b-2951566ef068"
      ],
      "AllowedViewerGroups": null,
      "AllowedViewers": null,
      "Categories": [
        "System pages"
      ],
      "Domain": null,
      "IsBrokenRedirect": false,
      "IsDeleted": false,
      "IsDoubleRedirect": false,
      "Owner": "c6798a76-7831-4675-959b-2951566ef068",
      "RedirectDomain": null,
      "RedirectNamespace": null,
      "RedirectTitle": null,
      "TimestampTicks": 638031934383460000,
      "Title": "Welcome",
      "Transclusions": [],
      "WikiNamespace": "Transclusion",
      "Html": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n",
      "MarkdownContent": "Welcome to the [Tavenem.Wiki](https://github.com/Tavenem/Wiki) sample.\r\n\r\n{{ifnottemplate|[[Category:System pages]]}}",
      "Preview": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n",
      "WikiLinks": [
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": true,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "System pages",
          "WikiNamespace": "Category"
        }
      ]
    },
    {
      "$type": ":Article:",
      "id": "995978eb-80da-4b2a-88c0-98173a839aa4",
      "AllowedEditorGroups": null,
      "AllowedEditors": [
        "c6798a76-7831-4675-959b-2951566ef068"
      ],
      "AllowedViewerGroups": null,
      "AllowedViewers": null,
      "Categories": [
        "System pages"
      ],
      "Domain": null,
      "IsBrokenRedirect": false,
      "IsDeleted": false,
      "IsDoubleRedirect": false,
      "Owner": "c6798a76-7831-4675-959b-2951566ef068",
      "RedirectDomain": null,
      "RedirectNamespace": null,
      "RedirectTitle": null,
      "TimestampTicks": 638031934387610000,
      "Title": "Main",
      "Transclusions": [
        {
          "Domain": null,
          "Title": "Welcome",
          "WikiNamespace": "Transclusion"
        }
      ],
      "WikiNamespace": "Wiki",
      "Html": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E package is a \u003Ca href=\u0022https://dotnet.microsoft.com\u0022\u003E.NET\u003C/a\u003E \u003Ca href=\u0022https://wikipedia.org/wiki/Wiki\u0022\u003Ewiki\u003C/a\u003E library.\u003C/p\u003E\n\u003Cp\u003EUnlike many wiki implementations, the main package (\u003Ccode\u003ETavenem.Wiki\u003C/code\u003E) is implementation-agnostic. It provides a set of core features which can be used to build a web-based wiki, a desktop application, a distributed cloud app with native clients, or any other architecture desired.\u003C/p\u003E\n\u003Cp\u003EThis implementation (\u003Ca href=\u0022https://github.com/Tavenem/Wiki.Blazor\u0022\u003ETavenem.Wiki.Blazor\u003C/a\u003E) is a \u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/razor-pages/ui-class\u0022\u003ERazor class library\u003C/a\u003E which can be included in any \u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/blazor\u0022\u003EBlazor\u003C/a\u003E project to add wiki capabilities to that project.\u003C/p\u003E\n\u003Cp\u003ESee the \u003Ca href=\u0022/Wiki/System:Help\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027System:Help\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003EHelp\u003C/a\u003E or \u003Ca href=\u0022/Wiki/System:About\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027System:About\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003EAbout\u003C/a\u003E pages for more information.\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n",
      "MarkdownContent": "{{Welcome}}\r\n\r\nThe [Tavenem.Wiki](https://github.com/Tavenem/Wiki) package is a [.NET](https://dotnet.microsoft.com) [[w:Wiki||]] library.\r\n\r\nUnlike many wiki implementations, the main package (\u0060Tavenem.Wiki\u0060) is implementation-agnostic. It provides a set of core features which can be used to build a web-based wiki, a desktop application, a distributed cloud app with native clients, or any other architecture desired.\r\n\r\nThis implementation ([Tavenem.Wiki.Blazor](https://github.com/Tavenem/Wiki.Blazor)) is a [Razor class library](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/ui-class) which can be included in any [Blazor](https://docs.microsoft.com/en-us/aspnet/core/blazor) project to add wiki capabilities to that project.\r\n\r\nSee the [[System:Help|]] or [[System:About|]] pages for more information.\r\n\r\n[[Category:System pages]]",
      "Preview": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E package is a \u003Ca href=\u0022https://dotnet.microsoft.com\u0022\u003E.NET\u003C/a\u003E \u003Ca href=\u0022https://wikipedia.org/wiki/Wiki\u0022\u003Ewiki\u003C/a\u003E library.\u003C/p\u003E\n\u003Cp\u003EUnlike many wiki implementations, the main package (\u003Ccode\u003ETavenem.Wiki\u003C/code\u003E) is implementation-agnostic. It provides a set of core features which can be used to build a web-based wiki, a desktop application, a distributed cloud app with native clients, or any other architecture desired.\u003C/p\u003E\n",
      "WikiLinks": [
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Help",
          "WikiNamespace": "System"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "About",
          "WikiNamespace": "System"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": true,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "System pages",
          "WikiNamespace": "Category"
        }
      ]
    },
    {
      "$type": ":Article:",
      "id": "d91a6abc-1273-444d-bede-b8dd974690bf",
      "AllowedEditorGroups": null,
      "AllowedEditors": [
        "c6798a76-7831-4675-959b-2951566ef068"
      ],
      "AllowedViewerGroups": null,
      "AllowedViewers": null,
      "Categories": [
        "System pages"
      ],
      "Domain": null,
      "IsBrokenRedirect": false,
      "IsDeleted": false,
      "IsDoubleRedirect": false,
      "Owner": "c6798a76-7831-4675-959b-2951566ef068",
      "RedirectDomain": null,
      "RedirectNamespace": null,
      "RedirectTitle": null,
      "TimestampTicks": 638031934388650000,
      "Title": "About",
      "Transclusions": [
        {
          "Domain": null,
          "Title": "Welcome",
          "WikiNamespace": "Transclusion"
        }
      ],
      "WikiNamespace": "System",
      "Html": "\u003Cdiv class=\u0022toc\u0022 role=\u0022navigation\u0022\u003E\n   \u003Ch2 class=\u0022toc-title\u0022\u003EContents\u003C/h2\u003E\n   \u003Cul\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#markup\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EMarkup\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#categories\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003ECategories\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#namespaces\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E3\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003ENamespaces\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#domains\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E4\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EDomains\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#history\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E5\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EHistory\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#access-control\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E6\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EAccess Control\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n   \u003C/ul\u003E\n\u003C/div\u003E\n\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E package is a \u003Ca href=\u0022https://dotnet.microsoft.com\u0022\u003E.NET\u003C/a\u003E \u003Ca href=\u0022https://wikipedia.org/wiki/Wiki\u0022\u003Ewiki\u003C/a\u003E library.\u003C/p\u003E\n\u003Ch1 id=\u0022markup\u0022\u003EMarkup\u003C/h1\u003E\n\u003Cp\u003EThe Tavenem Wiki syntax is a custom flavor of markdown. It implements all the features of \u003Ca href=\u0022http://commonmark.org\u0022\u003ECommonMark\u003C/a\u003E, as well as many others. See the \u003Ca href=\u0022/Wiki/Syntax\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Syntax\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003ESyntax\u003C/span\u003E\u003C/a\u003E page for details.\u003C/p\u003E\n\u003Ch1 id=\u0022categories\u0022\u003ECategories\u003C/h1\u003E\n\u003Cp\u003EEach page in a Tavenem Wiki can be assigned to any number of categories by placing a \u003Ca href=\u0022/Wiki/Syntax#wiki-links\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Syntax#wiki-links\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003Ewiki link\u003C/a\u003E to that category anywhere on the page. A link to a category is invisible when viewing the page; pages have a predefined section which lists all their categories.\u003C/p\u003E\n\u003Cp\u003ECategories may also be assigned to other categories, by placing a category link on the category\u0027s own page. It should be noted, however, that no strict hierarchy of categories is enforced. It is entirely possible to create \u201Cloops\u201D of category references, or categories which belong to multiple, unrelated parent categories.\u003C/p\u003E\n\u003Ch1 id=\u0022namespaces\u0022\u003ENamespaces\u003C/h1\u003E\n\u003Cp\u003EEvery page on a Tavenem Wiki belongs to a namespace. For example, this page is in the \u201CSystem\u201D namespace. There is a default namespace (called \u201CWiki\u201D unless you customize it) which can be omitted in titles and links, and won\u0027t normally be displayed.\u003C/p\u003E\n\u003Cp\u003EPages in the same namespace can\u0027t have the same title, in order to tall them apart. Pages in different namespaces, however, \u003Cem\u003Ecan\u003C/em\u003E have the same title.\u003C/p\u003E\n\u003Ch1 id=\u0022domains\u0022\u003EDomains\u003C/h1\u003E\n\u003Cp\u003EA page doesn\u0027t need to belong to a domain, but it may. A domain is a little like a \u201Chigher-level\u201D namespace.\u003C/p\u003E\n\u003Cp\u003EOne possible use for domains is for each registered user of a wiki to have their own personal domain (named for their user ID). This domain can be used to save \u201Cdraft\u201D copies of pages from the main wiki, where the duplicate namespace and title won\u0027t conflict with the \u201Creal\u201D page. This use is supported by Tavenem.Wiki.Blazor unless disabled. \u201CSave Draft,\u201D \u201CRestore Draft,\u201D and \u201CDiscard Draft\u201D buttons when editing, without requiring the user to know anything about the details of domains.\u003C/p\u003E\n\u003Cp\u003EAnother possible use for domains is to allow a single wiki instance to host multiple \u201Csub-wikis\u201D on different topics, where each one might contain pages with the same namespace and title, without conflicts. The advantage of this approach over entirely separate wikis is that each sub-wiki would be able to refer to pages in other wikis with simple \u003Ca href=\u0022/Wiki/Syntax#wiki-links\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Syntax#wiki-links\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003Esyntax \u00A7 wiki links\u003C/a\u003E, rather than full URLs.\u003C/p\u003E\n\u003Ch1 id=\u0022history\u0022\u003EHistory\u003C/h1\u003E\n\u003Cp\u003EEach page keeps a record of its history of revisions, along with the editor who made that change.\u003C/p\u003E\n\u003Ch1 id=\u0022access-control\u0022\u003EAccess Control\u003C/h1\u003E\n\u003Cp\u003EEach page in a Tavenem Wiki may be subject to various forms of access control.\u003C/p\u003E\n\u003Ch2 id=\u0022owner\u0022\u003EOwner\u003C/h2\u003E\n\u003Cp\u003EAny page in a wiki can have an owner. A page can also have no owner.\u003C/p\u003E\n\u003Cp\u003EWhen a page does have an owner, only the owner may delete or rename the page.\u003C/p\u003E\n\u003Cp\u003EOnly a page owner may set other types of access control for that page. An unowned page cannot be assigned any other type of access control. Only the page owner can reassign the page\u0027s ownership, or make it unowned.\u003C/p\u003E\n\u003Cp\u003EA page owner can be either an individual user, or a user group. When a group owns a page, any member of the group can delete, rename, or change the access controls for the page.\u003C/p\u003E\n\u003Ch2 id=\u0022allowed-editors\u0022\u003EAllowed editors\u003C/h2\u003E\n\u003Cp\u003EBy default, wiki pages may be edited by any registered user (anonymous users may not make edits). However, the owner of a page may assign a specific list of users or groups with permission to edit a page.\u003C/p\u003E\n\u003Cp\u003EThe owner of a page can also specify that \u003Cem\u003Enobody\u003C/em\u003E may edit a page, other than the owner (the owner is always allowed to edit their owned page).\u003C/p\u003E\n\u003Cp\u003EIt is also possible to assign a list of editable pages directly to a user or group.\u003C/p\u003E\n\u003Cp\u003EA user\u0027s effective permission to edit a page is determined by a combination of the page\u0027s list of allowed editors, and the user\u0027s own list of editable pages. This allows your wiki implementation to manage permission either on pages, on users/groups, or a combination of both.\u003C/p\u003E\n\u003Ch2 id=\u0022allowed-viewers\u0022\u003EAllowed viewers\u003C/h2\u003E\n\u003Cp\u003EBy default, wiki pages may be viewed by anyone, even anonymous users. However, the owner of a page may assign a specific list of users or groups with permission to view a page.\u003C/p\u003E\n\u003Cp\u003EThe owner of a page can also specify that \u003Cem\u003Enobody\u003C/em\u003E may view a page, other than the owner (the owner is always allowed to view their owned page).\u003C/p\u003E\n\u003Cp\u003EIt is also possible to assign a list of viewable pages directly to a user or group.\u003C/p\u003E\n\u003Cp\u003EA user\u0027s effective permission to view a page is determined by a combination of the page\u0027s list of allowed viewers, and the user\u0027s own list of viewable pages. This allows your wiki implementation to manage permission either on pages, on users/groups, or a combination of both.\u003C/p\u003E\n\u003Ch2 id=\u0022allowed-domains\u0022\u003EAllowed domains\u003C/h2\u003E\n\u003Cp\u003EA user or group can also be assigned a list of domains in which they are allowed to view or edit pages (viewing and editing are maintained as separate lists).\u003C/p\u003E\n\u003Cp\u003EThis permission establishes default access for the domain, but is superceded by access controls set on individual pages within the domain.\u003C/p\u003E\n\u003Cp\u003ESee the \u003Ca href=\u0022/Wiki/System:Help\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027System:Help\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003EHelp\u003C/a\u003E page for usage information.\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n",
      "MarkdownContent": "\u003C!-- TOC 1 --\u003E\r\n{{Welcome}}\r\n\r\nThe [Tavenem.Wiki](https://github.com/Tavenem/Wiki) package is a [.NET](https://dotnet.microsoft.com) [[w:Wiki||]] library.\r\n\r\n# Markup\r\nThe Tavenem Wiki syntax is a custom flavor of markdown. It implements all the features of [CommonMark](http://commonmark.org), as well as many others. See the [[Syntax]] page for details.\r\n\r\n# Categories\r\n\r\nEach page in a Tavenem Wiki can be assigned to any number of categories by placing a [[Syntax#Wiki links|wiki link]] to that category anywhere on the page. A link to a category is invisible when viewing the page; pages have a predefined section which lists all their categories.\r\n\r\nCategories may also be assigned to other categories, by placing a category link on the category\u0027s own page. It should be noted, however, that no strict hierarchy of categories is enforced. It is entirely possible to create \u0022loops\u0022 of category references, or categories which belong to multiple, unrelated parent categories.\r\n\r\n# Namespaces\r\n\r\nEvery page on a Tavenem Wiki belongs to a namespace. For example, this page is in the \u0022System\u0022 namespace. There is a default namespace (called \u0022Wiki\u0022 unless you customize it) which can be omitted in titles and links, and won\u0027t normally be displayed.\r\n\r\nPages in the same namespace can\u0027t have the same title, in order to tall them apart. Pages in different namespaces, however, *can* have the same title.\r\n\r\n# Domains\r\n\r\nA page doesn\u0027t need to belong to a domain, but it may. A domain is a little like a \u0022higher-level\u0022 namespace.\r\n\r\nOne possible use for domains is for each registered user of a wiki to have their own personal domain (named for their user ID). This domain can be used to save \u0022draft\u0022 copies of pages from the main wiki, where the duplicate namespace and title won\u0027t conflict with the \u0022real\u0022 page. This use is supported by Tavenem.Wiki.Blazor unless disabled. \u0022Save Draft,\u0022 \u0022Restore Draft,\u0022 and \u0022Discard Draft\u0022 buttons when editing, without requiring the user to know anything about the details of domains.\r\n\r\nAnother possible use for domains is to allow a single wiki instance to host multiple \u0022sub-wikis\u0022 on different topics, where each one might contain pages with the same namespace and title, without conflicts. The advantage of this approach over entirely separate wikis is that each sub-wiki would be able to refer to pages in other wikis with simple [[Syntax#Wiki links||]], rather than full URLs.\r\n\r\n# History\r\n\r\nEach page keeps a record of its history of revisions, along with the editor who made that change.\r\n\r\n# Access Control\r\n\r\nEach page in a Tavenem Wiki may be subject to various forms of access control.\r\n\r\n## Owner\r\n\r\nAny page in a wiki can have an owner. A page can also have no owner.\r\n\r\nWhen a page does have an owner, only the owner may delete or rename the page.\r\n\r\nOnly a page owner may set other types of access control for that page. An unowned page cannot be assigned any other type of access control. Only the page owner can reassign the page\u0027s ownership, or make it unowned.\r\n\r\nA page owner can be either an individual user, or a user group. When a group owns a page, any member of the group can delete, rename, or change the access controls for the page.\r\n\r\n## Allowed editors\r\n\r\nBy default, wiki pages may be edited by any registered user (anonymous users may not make edits). However, the owner of a page may assign a specific list of users or groups with permission to edit a page.\r\n\r\nThe owner of a page can also specify that *nobody* may edit a page, other than the owner (the owner is always allowed to edit their owned page).\r\n\r\nIt is also possible to assign a list of editable pages directly to a user or group.\r\n\r\nA user\u0027s effective permission to edit a page is determined by a combination of the page\u0027s list of allowed editors, and the user\u0027s own list of editable pages. This allows your wiki implementation to manage permission either on pages, on users/groups, or a combination of both.\r\n\r\n## Allowed viewers\r\n\r\nBy default, wiki pages may be viewed by anyone, even anonymous users. However, the owner of a page may assign a specific list of users or groups with permission to view a page.\r\n\r\nThe owner of a page can also specify that *nobody* may view a page, other than the owner (the owner is always allowed to view their owned page).\r\n\r\nIt is also possible to assign a list of viewable pages directly to a user or group.\r\n\r\nA user\u0027s effective permission to view a page is determined by a combination of the page\u0027s list of allowed viewers, and the user\u0027s own list of viewable pages. This allows your wiki implementation to manage permission either on pages, on users/groups, or a combination of both.\r\n\r\n## Allowed domains\r\n\r\nA user or group can also be assigned a list of domains in which they are allowed to view or edit pages (viewing and editing are maintained as separate lists).\r\n\r\nThis permission establishes default access for the domain, but is superceded by access controls set on individual pages within the domain.\r\n\r\nSee the [[System:Help|]] page for usage information.\r\n\r\n[[Category:System pages]]",
      "Preview": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E package is a \u003Ca href=\u0022https://dotnet.microsoft.com\u0022\u003E.NET\u003C/a\u003E \u003Ca href=\u0022https://wikipedia.org/wiki/Wiki\u0022\u003Ewiki\u003C/a\u003E library.\u003C/p\u003E\n\u003Ch1 id=\u0022markup\u0022\u003EMarkup\u003C/h1\u003E\n\u003Cp\u003EThe Tavenem Wiki syntax is a custom flavor of markdown. It implements all the features of \u003Ca href=\u0022http://commonmark.org\u0022\u003ECommonMark\u003C/a\u003E, as well as many others. See the \u003Ca href=\u0022/Wiki/Syntax\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Syntax\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003ESyntax\u003C/span\u003E\u003C/a\u003E page for details.\u003C/p\u003E\n",
      "WikiLinks": [
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Syntax",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Syntax",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Syntax",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Help",
          "WikiNamespace": "System"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": true,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "System pages",
          "WikiNamespace": "Category"
        }
      ]
    },
    {
      "$type": ":Article:",
      "id": "d70e2bb6-7db0-42a2-8578-5bc7bdbb1f1a",
      "AllowedEditorGroups": null,
      "AllowedEditors": [
        "c6798a76-7831-4675-959b-2951566ef068"
      ],
      "AllowedViewerGroups": null,
      "AllowedViewers": null,
      "Categories": [
        "Help pages"
      ],
      "Domain": null,
      "IsBrokenRedirect": false,
      "IsDeleted": false,
      "IsDoubleRedirect": false,
      "Owner": "c6798a76-7831-4675-959b-2951566ef068",
      "RedirectDomain": null,
      "RedirectNamespace": null,
      "RedirectTitle": null,
      "TimestampTicks": 638031934401960000,
      "Title": "Syntax",
      "Transclusions": [
        {
          "Domain": null,
          "Title": "Welcome",
          "WikiNamespace": "Transclusion"
        }
      ],
      "WikiNamespace": "Wiki",
      "Html": "\u003Cdiv class=\u0022toc\u0022 role=\u0022navigation\u0022\u003E\n   \u003Ch2 class=\u0022toc-title\u0022\u003EContents\u003C/h2\u003E\n   \u003Cul\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#wiki-links\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EWiki links\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#extended-markdown-syntax\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EExtended markdown syntax\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#additional-functionality\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E3\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EAdditional functionality\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#transclusions\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E4\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003ETransclusions\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#redirect\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E5\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003ERedirect\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n   \u003C/ul\u003E\n\u003C/div\u003E\n\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E syntax is a custom flavor of markdown. It implements all the features of \u003Ca href=\u0022http://commonmark.org\u0022\u003ECommonMark\u003C/a\u003E, as well as many others. Tavenem.Wiki uses \u003Ca href=\u0022https://github.com/lunet-io/markdig\u0022\u003EMarkdig\u003C/a\u003E to parse and format markdown, and the details of most extensions to standard CommonMark will be found on \u003Ca href=\u0022https://github.com/lunet-io/markdig\u0022\u003Eits GitHub page\u003C/a\u003E.\u003C/p\u003E\n\u003Ch1 id=\u0022wiki-links\u0022\u003EWiki links\u003C/h1\u003E\n\u003Cp\u003EIn addition to standard commonmark link syntax, a shorthand can be used to link to other wiki articles.\u003C/p\u003E\n\u003Cp\u003EIn the simplest case, you can just put the title of an article in double square brackets to link to it. For example, \u003Ccode\u003E[[Main]]\u003C/code\u003E will create a link like this: \u003Ca href=\u0022/Wiki/Main\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Main\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003EMain\u003C/span\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ELinks are not case sensitive, and will be converted to \u201Cwiki title case\u201D automatically. Wiki titles always start with an uppercase letter, but the case of the rest of the letters is unchanged. That means \u003Ccode\u003E[[main]]\u003C/code\u003E and \u003Ccode\u003E[[Main]]\u003C/code\u003E will both produce the same link, with a capital letter: \u003Ca href=\u0022/Wiki/Main\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Main\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003EMain\u003C/span\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ETo override the default title, you can specify a manual title for your link by including it after a pipe character. For example, \u003Ccode\u003E[[Main|link]]\u003C/code\u003E will produce a link like this: \u003Ca href=\u0022/Wiki/Main\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Main\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003Elink\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EIf you just want to suppress the default capitalization and force your link to be all lowercase, you can use two pipe characters with no title. For example: \u003Ccode\u003E[[Main||]]\u003C/code\u003E will produce a link like this: \u003Ca href=\u0022/Wiki/Main\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Main\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003Emain\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EAny text which immediately follows a wiki link will be \u201Cpulled in\u201D to the link. For example, \u003Ccode\u003E[[main]]\u003C/code\u003Eland creates a link like this: \u003Ca href=\u0022/Wiki/Main\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Main\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003EMain\u003C/span\u003Eland\u003C/a\u003E. Most of the time, this will be helpful when you need to pluralize the text of the link (e.g. \u003Ccode\u003E[[Syntax]]\u003C/code\u003Ees = \u003Ca href=\u0022/Wiki/Syntax\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Syntax\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003ESyntax\u003C/span\u003Ees\u003C/a\u003E).\u003C/p\u003E\n\u003Cp\u003ETo link to an article in a namespace, put the namespace first, then a semicolon. For example, \u003Ccode\u003E[[System:Help]]\u003C/code\u003E creates a link like this: \u003Ca href=\u0022/Wiki/System:Help\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027System:Help\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-namespace\u0022\u003ESystem\u003C/span\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003EHelp\u003C/span\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EIf you prefer not to show the namespace in your link, you can use a pipe character with a blank title to automatically strip the namespace. For example, \u003Ccode\u003E[[System:Help|]]\u003C/code\u003E creates a link like this: \u003Ca href=\u0022/Wiki/System:Help\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027System:Help\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003EHelp\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThe double pipe character with no title also strips the namespace, in addition to forcing all lowercase. Either style can also be combined with extra text. For example, \u003Ccode\u003E[[System:Help||]]\u003C/code\u003Eing creates a link like this: \u003Ca href=\u0022/Wiki/System:Help\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027System:Help\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003Ehelping\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022media-links\u0022\u003EMedia links\u003C/h2\u003E\n\u003Cp\u003ESimilarly to standard commonmark media links, a wiki link with a \u2018!\u2019 character at the beginning will embed the file rather than link to it. Note that images are floated to the right in wiki articles.\u003C/p\u003E\n\u003Ch2 id=\u0022fragment-links\u0022\u003EFragment links\u003C/h2\u003E\n\u003Cp\u003ETo link to a particular section of an article, you can use the \u2018#\u2019 character followed by the heading title. For example, \u003Ccode\u003E[[Syntax#Wiki links]]\u003C/code\u003E creates a link like this: \u003Ca href=\u0022/Wiki/Syntax#wiki-links\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Syntax#wiki-links\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003ESyntax#wiki-links\u003C/span\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003ENote: if the section is within the same article, you can technically omit the article title to create a local link. However, in a Blazor app this will not function as expected due to the \u003Ccode\u003Ebase href\u003C/code\u003E value set on the client.\u003C/p\u003E\n\u003Cp\u003EIf you use the pipe character with no title, the \u2018#\u2019 character will be replaced by a paragraph indicator. For example, \u003Ccode\u003E[[Syntax#Wiki links|]]\u003C/code\u003E creates a link like this: \u003Ca href=\u0022/Wiki/Syntax#wiki-links\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Syntax#wiki-links\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003ESyntax \u00A7 Wiki links\u003C/a\u003E. The double pipe, as usual, has the same effect but also forces all lowercase.\u003C/p\u003E\n\u003Ch2 id=\u0022category-links\u0022\u003ECategory links\u003C/h2\u003E\n\u003Cp\u003ENote that placing a wiki link to a category does not create a link to that category. Instead, it categorizes the article in which the link appears as a member of the linked category. When you intend to create a visible link to a category, and \u003Cem\u003Enot\u003C/em\u003E categorize the article, you should prefix the link with an additional semicolon. For example, \u003Ccode\u003E[[:Category:Help pages]]\u003C/code\u003E creates a link like this: \u003Ca href=\u0022/Wiki/Category:Help%20pages\u0022 class=\u0022wiki-link-exists\u0022 onmousemove=\u0022wikiblazor.showPreview(event, \u0027Category:Help pages\u0027);\u0022 onmouseleave=\u0022wikiblazor.hidePreview();\u0022\u003E\u003Cspan class=\u0022wiki-link-namespace\u0022\u003ECategory\u003C/span\u003E\u003Cspan class=\u0022wiki-link-title\u0022\u003EHelp pages\u003C/span\u003E\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022wikipedia-links\u0022\u003EWikipedia links\u003C/h2\u003E\n\u003Cp\u003ETo easily link to an article on \u003Ca href=\u0022https://www.wikipedia.org/\u0022\u003EWikipedia\u003C/a\u003E, you can use the prefix \u003Ccode\u003Ew:\u003C/code\u003E followed by the title of the article. For example, \u003Ccode\u003E[[w:Wiki]]\u003C/code\u003E creates a link like this: \u003Ca href=\u0022https://wikipedia.org/wiki/Wiki\u0022\u003EWiki\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022wikimedia-commons-links\u0022\u003EWikimedia Commons links\u003C/h2\u003E\n\u003Cp\u003ETo easily link to a file on \u003Ca href=\u0022https://commons.wikimedia.org/\u0022\u003EWikimedia Commons\u003C/a\u003E, you can use the prefix \u003Ccode\u003Ecc:\u003C/code\u003E followed by the name of the file. A \u2018!\u2019 character will embed the file, rather than link to it. For example, \u003Ccode\u003E![[cc:Example.jpg]]\u003C/code\u003E embeds the image seen to the side of this section. \u003Ca href=\u0022https://commons.wikimedia.org/wiki/File:Example.jpg\u0022\u003E\u003Cimg src=\u0022https://commons.wikimedia.org/wiki/Special:Redirect/file/Example.jpg\u0022 alt=\u0022cc:Example.jpg\u0022\u003E\u003C/a\u003E The format of the generated image and link may fulfill the attrtibution requirements of many Wikimedia Commons files, but you should always check the specific requirements of any file you link.\u003C/p\u003E\n\u003Ch1 id=\u0022extended-markdown-syntax\u0022\u003EExtended markdown syntax\u003C/h1\u003E\n\u003Ch2 id=\u0022abbreviations\u0022\u003EAbbreviations\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AbbreviationSpecs.md\u0022\u003Ethe Markdig Abbreviation documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022citations\u0022\u003ECitations\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md#cite\u0022\u003Ethe Markdig Cite documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022definition-lists\u0022\u003EDefinition lists\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/DefinitionListSpecs.md\u0022\u003Ethe Markdig DefinitionList documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022divs\u0022\u003EDivs\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/CustomContainerSpecs.md\u0022\u003Ethe Markdig CustomContainer documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022figures\u0022\u003EFigures\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md\u0022\u003Ethe Markdig Cite documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022footers\u0022\u003EFooters\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md#footers\u0022\u003Ethe Markdig Cite documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022footnotes\u0022\u003EFootnotes\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FootnotesSpecs.md\u0022\u003Ethe Markdig Cite documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022inserted-text\u0022\u003EInserted text\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#inserted\u0022\u003Ethe Markdig EmphasisExtra documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022marked-text\u0022\u003EMarked text\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#marked\u0022\u003Ethe Markdig EmphasisExtra documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022math\u0022\u003EMath\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/MathSpecs.md\u0022\u003Ethe Markdig Math documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022ordered-lists-with-letters\u0022\u003EOrdered lists with letters\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/ListExtraSpecs.md\u0022\u003Ethe Markdig ListExtra documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022spans\u0022\u003ESpans\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/CustomContainerSpecs.md#inline-custom-container\u0022\u003Ethe Markdig CustomContainer documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022strikethrough\u0022\u003EStrikethrough\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#strikethrough\u0022\u003Ethe Markdig EmphasisExtra documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022superscript-and-subscript\u0022\u003ESuperscript and subscript\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#superscript-and-subscript\u0022\u003Ethe Markdig EmphasisExtra documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022tables\u0022\u003ETables\u003C/h2\u003E\n\u003Cp\u003EThere are two accepted formats for tables: pipe and grid.\u003C/p\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/PipeTableSpecs.md\u0022\u003Ethe Markdig PipeTable documentation\u003C/a\u003E and \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/GridTableSpecs.md\u0022\u003Ethe Markdig GridTable documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022task-lists\u0022\u003ETask lists\u003C/h2\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/TaskListSpecs.md\u0022\u003Ethe Markdig TaskList documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch1 id=\u0022additional-functionality\u0022\u003EAdditional functionality\u003C/h1\u003E\n\u003Ch2 id=\u0022auto-dashes\u0022\u003EAuto dashes\u003C/h2\u003E\n\u003Cp\u003EEn- and Em-dashes are automatically converted from double and triple hyphens.\u003C/p\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md#smartypants-separators\u0022\u003Ethe Markdig SmartyPants documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022auto-ellipses\u0022\u003EAuto ellipses\u003C/h2\u003E\n\u003Cp\u003EEllipses are automatically converted from triple periods.\u003C/p\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md#smartypants-separators\u0022\u003Ethe Markdig SmartyPants documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022auto-links\u0022\u003EAuto links\u003C/h2\u003E\n\u003Cp\u003EURLs are automatically converted to links, without the need for markdown syntax.\u003C/p\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AutoLinks.md\u0022\u003Ethe Markdig AutoLink documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022auto-quotes\u0022\u003EAuto quotes\u003C/h2\u003E\n\u003Cp\u003EQuotes are automatically converted to the correct HTML escape sequences based on context.\u003C/p\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md\u0022\u003Ethe Markdig SmartyPants documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022auto-table-of-contents\u0022\u003EAuto table of contents\u003C/h2\u003E\n\u003Cp\u003EEvery article automatically receives a table of contents based on its headings, injected upon creation or revision.\u003C/p\u003E\n\u003Cp\u003EThe automatic table of contents can be suppressed by including the following HTML comment anywhere in the article: \u003Ccode\u003E\u0026lt;!--notoc--\u0026gt;\u003C/code\u003E\u003C/p\u003E\n\u003Cp\u003EThe table of contents can also be customized by including a comment in the format: \u003Ccode\u003E\u0026lt;!-- toc (depth) (start) (title)--\u0026gt;\u003C/code\u003E\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003E(depth)\u003C/code\u003E parameter should be replaced by a number that indicates the highest level of heading that should be included. E.g. to include \u003Ccode\u003Eh3\u003C/code\u003E set depth to 3. You can use the character \u2018*\u2019 to indicate that the default should be used.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003E(start)\u003C/code\u003E parameter should be replaced by a number that indicates the lowest level of heading that should be included. E.g. to start with \u003Ccode\u003Eh2\u003C/code\u003E (and skip all \u003Ccode\u003Eh1\u003C/code\u003E tags) set start to 2. Start can be omitted, but not if a title is included. You can use the character \u2018*\u2019 to indicate that the default should be used.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003E(title)\u003C/code\u003E parameter should be replaced by the title for the rendered table. Title can be omitted.\u003C/p\u003E\n\u003Cp\u003EYou can include multiple tables of contents.\u003C/p\u003E\n\u003Cp\u003EIf you place a table of contents comment after a heading, it will summarize all the headings with a higher number value that the preceding one, up to (but not including) the next heading of the same or lower value as the one which preceded it. For example: if you include a table of contents comment after an \u003Ccode\u003Eh2\u003C/code\u003E heading, it will include all the \u003Ccode\u003Eh3\u003C/code\u003E, \u003Ccode\u003Eh4\u003C/code\u003E, etc. headings which follow, but stop when it reaches an \u003Ccode\u003Eh2\u003C/code\u003E or \u003Ccode\u003Eh1\u003C/code\u003E. This allows you to create tables of contents for sub-sections of a document.\u003C/p\u003E\n\u003Ch2 id=\u0022html-attributes\u0022\u003EHTML attributes\u003C/h2\u003E\n\u003Cp\u003EAn \u003Ccode\u003Eid\u003C/code\u003E, \u003Ccode\u003Eclass\u003C/code\u003E, and other arbitrary attributes can easily be added to any HTML element using compact markdown syntax.\u003C/p\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/GenericAttributesSpecs.md\u0022\u003Ethe Markdig GenericAttribute documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch2 id=\u0022heading-auto-identifiers\u0022\u003EHeading auto-identifiers\u003C/h2\u003E\n\u003Cp\u003EAll headings automatically receive an \u003Ccode\u003Eid\u003C/code\u003E attribute for easy fragment linking.\u003C/p\u003E\n\u003Cp\u003ESee \u003Ca href=\u0022https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AutoIdentifierSpecs.md\u0022\u003Ethe Markdig AutoIdentifier documentation\u003C/a\u003E.\u003C/p\u003E\n\u003Ch1 id=\u0022transclusions\u0022\u003ETransclusions\u003C/h1\u003E\n\u003Cp\u003EThe contents of a wiki article can be included in another by enclosing its title in double curly brackets. For example, the welcome message at the top of this page was included with this syntax: \u003Ccode\u003E{{Welcome}}\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003EThe default namespace for transclusions is usually different from the standard default namespace. Keep that in mind when creating articles which you expect to be mainly used for transclusions, or when transcluding anything.\u003C/p\u003E\n\u003Cp\u003EIt is also possible to pass parameters to a transcluded article by adding them after pipe characters. For instance, \u003Ccode\u003E{{Welcome|param}}\u003C/code\u003E passes the value \u201Cparam\u201D as a parameter. In the transcluded article, parameters may be referenced by a number in parenthesis, such as \u003Ccode\u003E(1)\u003C/code\u003E (which refers to the first parameter).\u003C/p\u003E\n\u003Cp\u003EYou can also name parameters. For example, \u003Ccode\u003E{{Welcome|value=1}}\u003C/code\u003E passes the value \u201C1\u201D as a parameter with the name \u201Cvalue\u201D. You can use a named parameter by placing its name in parenthesis, such as \u003Ccode\u003E(value)\u003C/code\u003E.\u003C/p\u003E\n\u003Cp\u003EIf you mix named and unnamed parameters, the numbering only includes unnamed parameters. For example, in \u003Ccode\u003E{{Welcome|value=1|param}}\u003C/code\u003E the parameter \u201Cparam\u201D would be referred to as \u003Ccode\u003E(1)\u003C/code\u003E even though it\u0027s second in the list, because it\u0027s the first \u003Cem\u003Eunnamed\u003C/em\u003E parameter.\u003C/p\u003E\n\u003Ch2 id=\u0022functions\u0022\u003EFunctions\u003C/h2\u003E\n\u003Cp\u003EYou can also use certain keywords in double curly brackets, called functions.\u003C/p\u003E\n\u003Ch3 id=\u0022eval\u0022\u003EEval\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eeval\u003C/code\u003E function allows you to evaluate a JavaScript expression. The \u201Ccode\u201D parameter, or the first unnamed parameter if no parameter is named \u201Ccode\u201D, should contain a JavaScript expression (something which would be valid after a \u003Ccode\u003Ereturn\u003C/code\u003E keyword).\u003C/p\u003E\n\u003Cp\u003EYou can pass in any number of other parameters. Named parameters will become available in the scope of your JavaScript expression by the same names. Unnamed parameters will be available in a map object with the name \u003Ccode\u003Eargs\u003C/code\u003E, using the parameter numbers as (\u003Ccode\u003Estring\u003C/code\u003E) indexes.\u003C/p\u003E\n\u003Cp\u003ENumeric parameters will be available as type \u003Ccode\u003Enumber\u003C/code\u003E, true/false will be available as \u003Ccode\u003Eboolean\u003C/code\u003E, and parameters which can be parsed as a date/time will be available as \u003Ccode\u003EDate\u003C/code\u003E objects. All other parameters will be \u003Ccode\u003Estring\u003C/code\u003E values.\u003C/p\u003E\n\u003Cp\u003EFor example, \u003Ccode\u003E{{eval|Math.pow(x, 3)|x=2}}\u003C/code\u003E will be replaced by \u201C8\u201D.\u003C/p\u003E\n\u003Ch3 id=\u0022exec\u0022\u003EExec\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eexec\u003C/code\u003E function is similar to \u003Ccode\u003Eeval\u003C/code\u003E, but can be more convenient for complex scripts. Instead of writing JavaScript inline, you can write your JavaScript code in a separate article in the script namespace, then use the name of that article as the first paramater (or a parameter named \u201Ccode\u201D).\u003C/p\u003E\n\u003Cp\u003EUnlike \u003Ccode\u003Eeval\u003C/code\u003E the result of your code is not automatically returned. If your \u003Ccode\u003Eexec\u003C/code\u003E function should be replaced by a value, you must include your own return statement.\u003C/p\u003E\n\u003Ch3 id=\u0022format\u0022\u003EFormat\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eformat\u003C/code\u003E function accepts two parameters: a value and a format string. The value should either be numeric, or parsable as a date/time value. The format string can be anything understood as a \u003Ca href=\u0022https://learn.microsoft.com/en-us/dotnet/standard/base-types/formatting-types\u0022\u003E.NET format specifier\u003C/a\u003E, either standard or custom. The function will be replaced by the value in the given format.\u003C/p\u003E\n\u003Ch3 id=\u0022full-page-name\u0022\u003EFull Page Name\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Efullpagename\u003C/code\u003E function will be replaced by the complete title of the currently viewed page (no matter how many levels deep the transclusion originally appears), including domain and namespace if they are not the default.\u003C/p\u003E\n\u003Ch3 id=\u0022if\u0022\u003EIf\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eif\u003C/code\u003E function accepts no less than two and up to three parameters. The first parameter should be either \u201Ctrue\u201D, \u201Cfalse\u201D, or a number. \u201CTrue\u201D and numbers greater than zero cause the function to be replaced by the second parameter. \u201CFalse\u201D or numbers less than or equal to zero cause the function to be replaced by the third parameter if it\u0027s present, or to be completely removed if not.\u003C/p\u003E\n\u003Ch3 id=\u0022if-category\u0022\u003EIf Category\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eifcategory\u003C/code\u003E function is replaced by its first parameter if the currently viewed page (no matter how many levels deep the transclusion originally appears) is a category. If not, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\u003C/p\u003E\n\u003Ch3 id=\u0022if-equal\u0022\u003EIf Equal\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eifeq\u003C/code\u003E function accepts no less than three and up to four parameters. If the first and second parameters are the same, the function is replaced by the third parameter. Otherwise the function is replaced by the fourth parameter if it\u0027s present, or completely removed if not.\u003C/p\u003E\n\u003Cp\u003ESameness is determined based on the type of the parameters. If they are exactly the same string, they are the same. If they are both numeric values, they are the same if the difference between them is no more than 10\u003Csup\u003E-15\u003C/sup\u003E (this tolerance minimizes problems due to \u003Ca href=\u0022https://wikipedia.org/wiki/Floating-point_error_mitigation\u0022\u003Efloating-point error\u003C/a\u003E).\u003C/p\u003E\n\u003Ch3 id=\u0022if-not-template\u0022\u003EIf Not Template\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eifnottemplate\u003C/code\u003E function is replaced by its first parameter when viewed directly on an article page. When it is part of an article that is being transcluded in another page, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\u003C/p\u003E\n\u003Ch3 id=\u0022if-talk\u0022\u003EIf Talk\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eiftalk\u003C/code\u003E function is replaced by its first parameter when it is shown on a talk page. When it is viewed anywhere else, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\u003C/p\u003E\n\u003Ch3 id=\u0022if-template\u0022\u003EIf Template\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Eiftemplate\u003C/code\u003E function is replaced by its first parameter when it is part of an article that is being transcluded in another page. When it is viewed directly on an article page, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\u003C/p\u003E\n\u003Ch3 id=\u0022namespace\u0022\u003ENamespace\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Enamespace\u003C/code\u003E function is replaced by the namespace of the currently viewed page (no matter how many levels deep the transclusion originally appears).\u003C/p\u003E\n\u003Ch3 id=\u0022no-toc\u0022\u003ENo TOC\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Enotoc\u003C/code\u003E function is replaced by \u003Ccode\u003E\u0026lt;!-- NOTOC --\u0026gt;\u003C/code\u003E, which suppresses the default table of contents.\u003C/p\u003E\n\u003Cp\u003EIt is usually better to use the HTML comment directly, since this avoids the extra processing of a transclusion, but the function can sometimes be helpful when the HTML comment would cause formatting issues.\u003C/p\u003E\n\u003Ch3 id=\u0022pad-left\u0022\u003EPad Left\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Epadleft\u003C/code\u003E function accepts at least two and up to three parameters. The first is a value which is to be padded. The second parameter is the total number of characters which should appear in the final string. The third (optional) parameter is the padding character, which defaults to \u20180\u2019 if unspecified.\u003C/p\u003E\n\u003Cp\u003EThe function will be replaced by a string with at least the specified length that includes the first parameter, and as many leading characters as necessary to reach the desired length. For example, \u003Ccode\u003E{{padleft|5|4}}\u003C/code\u003E will result in \u201C0005\u201D.\u003C/p\u003E\n\u003Ch3 id=\u0022pad-right\u0022\u003EPad Right\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Epadright\u003C/code\u003E function accepts at least two and up to three parameters. The first is a value which is to be padded. The second parameter is the total number of characters which should appear in the final string. The third (optional) parameter is the padding character, which defaults to \u20180\u2019 if unspecified.\u003C/p\u003E\n\u003Cp\u003EThe function will be replaced by a string with at least the specified length that includes the first parameter, and as many trailing characters as necessary to reach the desired length. For example, \u003Ccode\u003E{{padright|5|4}}\u003C/code\u003E will result in \u201C5000\u201D.\u003C/p\u003E\n\u003Ch3 id=\u0022page-name\u0022\u003EPage Name\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Epagename\u003C/code\u003E function is replaced by the title of the currently viewed page (no matter how many levels deep the transclusion originally appears), not including any domain or namespace.\u003C/p\u003E\n\u003Ch3 id=\u0022preview\u0022\u003EPreview\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Epreview\u003C/code\u003E function is replaced by its first parameter only in the preview version of the article. The preview version is shown in tooltips when hovering over a link, and in some Talk messages.\u003C/p\u003E\n\u003Ch3 id=\u0022toc\u0022\u003ETOC\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Etoc\u003C/code\u003E function is replaced by \u003Ccode\u003E\u0026lt;!-- TOC --\u0026gt;\u003C/code\u003E, which places a table of contents. It accepts up to three parameters, which correspond to the three values normally used in that comment: depth, start, and title. Depth and start should be either numbers or the \u2018*\u2019 character.\u003C/p\u003E\n\u003Cp\u003EIt is usually better to use the HTML comment directly, since this avoids the extra processing of a transclusion, but the function can sometimes be helpful when the HTML comment would cause formatting issues.\u003C/p\u003E\n\u003Ch3 id=\u0022to-lower\u0022\u003ETo Lower\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Etolower\u003C/code\u003E function is replaced by its first parameter, converted to all lower case.\u003C/p\u003E\n\u003Ch3 id=\u0022to-title-case\u0022\u003ETo Title Case\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Etotitlecase\u003C/code\u003E function is replaced by its first parameter, where the first character is converted to upper case, and the rest of the characters are unchanged.\u003C/p\u003E\n\u003Ch3 id=\u0022to-upper\u0022\u003ETo Upper\u003C/h3\u003E\n\u003Cp\u003EThe \u003Ccode\u003Etoupper\u003C/code\u003E function is replaced by its first parameter, converted to all upper case.\u003C/p\u003E\n\u003Ch1 id=\u0022redirect\u0022\u003ERedirect\u003C/h1\u003E\n\u003Cp\u003EThere is another function-like construct which can be used to create an automatic redirect from one wiki page to another.\u003C/p\u003E\n\u003Cp\u003EIf \u003Ccode\u003E{{redirect|Title}}\u003C/code\u003E appears at the very beginning of a page\u0027s content, the page will become a redirect to the \u201CTitle\u201D page. When the redirect page is requested, it will fetch the page whose full title matches the parameter after the pipe in the redirect directive, and display that page to the user instead. The title parameter may include a namespace, and/or a domain.\u003C/p\u003E\n\u003Cp\u003EWhen a page is \u201Crenamed,\u201D in reality a new page is created with the new name, and the original page is automatically revised to contain a redirect to the new page. This prevents users from encountering an unexpected \u201Cpage not found\u201D when following a link to the original page.\u003C/p\u003E\n\u003Cp\u003EThe target of a redirect may also contain its own redirect. The wiki will follow any number of redirects until it finds a non-redirect page to display. However, this is not ideal for performance. It is better for each page to redirect directly to the final page which should be displayed to users.\u003C/p\u003E\n\u003Cp\u003EIf a redirect\u0027s title parameter refers to a page which does not exist, the redirect page itself \u003Cem\u003Ewill\u003C/em\u003E be displayed to the user (rather than indicating that a page is missing). In this situation, the rredirect directive will be visible to the user, to plainly indicate what has gone wrong.\u003C/p\u003E\n\u003Cp\u003ENo leading spaces or other content may appear before a redirect directive. Otherwise it will simply be displayed like normal text content.\u003C/p\u003E\n\u003Cp\u003EOn the other hand, content \u003Cem\u003Emay\u003C/em\u003E appear \u003Cem\u003Eafter\u003C/em\u003E a redirect directive, which will not affect the redirect in any way.\u003C/p\u003E\n\u003Cp\u003E\u003C/p\u003E\n",
      "MarkdownContent": "\u003C!-- TOC 1 * --\u003E\r\n{{Welcome}}\r\n\r\nThe [Tavenem.Wiki](https://github.com/Tavenem/Wiki) syntax is a custom flavor of markdown. It implements all the features of [CommonMark](http://commonmark.org), as well as many others. Tavenem.Wiki uses [Markdig](https://github.com/lunet-io/markdig) to parse and format markdown, and the details of most extensions to standard CommonMark will be found on [its GitHub page](https://github.com/lunet-io/markdig).\r\n\r\n# Wiki links\r\n\r\nIn addition to standard commonmark link syntax, a shorthand can be used to link to other wiki articles.\r\n\r\nIn the simplest case, you can just put the title of an article in double square brackets to link to it. For example, \u0060[[Main]]\u0060 will create a link like this: [[Main]].\r\n\r\nLinks are not case sensitive, and will be converted to \u0022wiki title case\u0022 automatically. Wiki titles always start with an uppercase letter, but the case of the rest of the letters is unchanged. That means \u0060[[main]]\u0060 and \u0060[[Main]]\u0060 will both produce the same link, with a capital letter: [[main]].\r\n\r\nTo override the default title, you can specify a manual title for your link by including it after a pipe character. For example, \u0060[[Main|link]]\u0060 will produce a link like this: [[Main|link]].\r\n\r\nIf you just want to suppress the default capitalization and force your link to be all lowercase, you can use two pipe characters with no title. For example: \u0060[[Main||]]\u0060 will produce a link like this: [[Main||]].\r\n\r\nAny text which immediately follows a wiki link will be \u0022pulled in\u0022 to the link. For example, \u0060[[main]]\u0060land creates a link like this: [[main]]land. Most of the time, this will be helpful when you need to pluralize the text of the link (e.g. \u0060[[Syntax]]\u0060es = [[Syntax]]es).\r\n\r\nTo link to an article in a namespace, put the namespace first, then a semicolon. For example, \u0060[[System:Help]]\u0060 creates a link like this: [[System:Help]].\r\n\r\nIf you prefer not to show the namespace in your link, you can use a pipe character with a blank title to automatically strip the namespace. For example, \u0060[[System:Help|]]\u0060 creates a link like this: [[System:Help|]].\r\n\r\nThe double pipe character with no title also strips the namespace, in addition to forcing all lowercase. Either style can also be combined with extra text. For example, \u0060[[System:Help||]]\u0060ing creates a link like this: [[System:Help||]]ing.\r\n\r\n## Media links\r\n\r\nSimilarly to standard commonmark media links, a wiki link with a \u0027!\u0027 character at the beginning will embed the file rather than link to it. Note that images are floated to the right in wiki articles.\r\n\r\n## Fragment links\r\n\r\nTo link to a particular section of an article, you can use the \u0027#\u0027 character followed by the heading title. For example, \u0060[[Syntax#Wiki links]]\u0060 creates a link like this: [[Syntax#Wiki links]].\r\n\r\nNote: if the section is within the same article, you can technically omit the article title to create a local link. However, in a Blazor app this will not function as expected due to the \u0060base href\u0060 value set on the client.\r\n\r\nIf you use the pipe character with no title, the \u0027#\u0027 character will be replaced by a paragraph indicator. For example, \u0060[[Syntax#Wiki links|]]\u0060 creates a link like this: [[Syntax#Wiki links|]]. The double pipe, as usual, has the same effect but also forces all lowercase.\r\n\r\n## Category links\r\n\r\nNote that placing a wiki link to a category does not create a link to that category. Instead, it categorizes the article in which the link appears as a member of the linked category. When you intend to create a visible link to a category, and *not* categorize the article, you should prefix the link with an additional semicolon. For example, \u0060[[:Category:Help pages]]\u0060 creates a link like this: [[:Category:Help pages]].\r\n\r\n## Wikipedia links\r\n\r\nTo easily link to an article on [Wikipedia](https://www.wikipedia.org/), you can use the prefix \u0060w:\u0060 followed by the title of the article. For example, \u0060[[w:Wiki]]\u0060 creates a link like this: [[w:Wiki]].\r\n\r\n## Wikimedia Commons links\r\n\r\nTo easily link to a file on [Wikimedia Commons](https://commons.wikimedia.org/), you can use the prefix \u0060cc:\u0060 followed by the name of the file. A \u0027!\u0027 character will embed the file, rather than link to it. For example, \u0060![[cc:Example.jpg]]\u0060 embeds the image seen to the side of this section. ![[cc:Example.jpg]] The format of the generated image and link may fulfill the attrtibution requirements of many Wikimedia Commons files, but you should always check the specific requirements of any file you link.\r\n\r\n# Extended markdown syntax\r\n\r\n## Abbreviations\r\n\r\nSee [the Markdig Abbreviation documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AbbreviationSpecs.md).\r\n\r\n## Citations\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md#cite).\r\n\r\n## Definition lists\r\n\r\nSee [the Markdig DefinitionList documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/DefinitionListSpecs.md).\r\n\r\n## Divs\r\n\r\nSee [the Markdig CustomContainer documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/CustomContainerSpecs.md).\r\n\r\n## Figures\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md).\r\n\r\n## Footers\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md#footers).\r\n\r\n## Footnotes\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FootnotesSpecs.md).\r\n\r\n## Inserted text\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#inserted).\r\n\r\n## Marked text\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#marked).\r\n\r\n## Math\r\n\r\nSee [the Markdig Math documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/MathSpecs.md).\r\n\r\n## Ordered lists with letters\r\n\r\nSee [the Markdig ListExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/ListExtraSpecs.md).\r\n\r\n## Spans\r\n\r\nSee [the Markdig CustomContainer documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/CustomContainerSpecs.md#inline-custom-container).\r\n\r\n## Strikethrough\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#strikethrough).\r\n\r\n## Superscript and subscript\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#superscript-and-subscript).\r\n\r\n## Tables\r\n\r\nThere are two accepted formats for tables: pipe and grid.\r\n\r\nSee [the Markdig PipeTable documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/PipeTableSpecs.md) and [the Markdig GridTable documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/GridTableSpecs.md).\r\n\r\n## Task lists\r\n\r\nSee [the Markdig TaskList documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/TaskListSpecs.md).\r\n\r\n# Additional functionality\r\n\r\n## Auto dashes\r\n\r\nEn- and Em-dashes are automatically converted from double and triple hyphens.\r\n\r\nSee [the Markdig SmartyPants documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md#smartypants-separators).\r\n\r\n## Auto ellipses\r\n\r\nEllipses are automatically converted from triple periods.\r\n\r\nSee [the Markdig SmartyPants documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md#smartypants-separators).\r\n\r\n## Auto links\r\n\r\nURLs are automatically converted to links, without the need for markdown syntax.\r\n\r\nSee [the Markdig AutoLink documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AutoLinks.md).\r\n\r\n## Auto quotes\r\n\r\nQuotes are automatically converted to the correct HTML escape sequences based on context.\r\n\r\nSee [the Markdig SmartyPants documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md).\r\n\r\n## Auto table of contents\r\n\r\nEvery article automatically receives a table of contents based on its headings, injected upon creation or revision.\r\n\r\nThe automatic table of contents can be suppressed by including the following HTML comment anywhere in the article: \u0060\u003C!--notoc--\u003E\u0060\r\n\r\nThe table of contents can also be customized by including a comment in the format: \u0060\u003C!-- toc (depth) (start) (title)--\u003E\u0060\r\n\r\nThe \u0060(depth)\u0060 parameter should be replaced by a number that indicates the highest level of heading that should be included. E.g. to include \u0060h3\u0060 set depth to 3. You can use the character \u0027*\u0027 to indicate that the default should be used.\r\n\r\nThe \u0060(start)\u0060 parameter should be replaced by a number that indicates the lowest level of heading that should be included. E.g. to start with \u0060h2\u0060 (and skip all \u0060h1\u0060 tags) set start to 2. Start can be omitted, but not if a title is included. You can use the character \u0027*\u0027 to indicate that the default should be used.\r\n\r\nThe \u0060(title)\u0060 parameter should be replaced by the title for the rendered table. Title can be omitted.\r\n\r\nYou can include multiple tables of contents.\r\n\r\nIf you place a table of contents comment after a heading, it will summarize all the headings with a higher number value that the preceding one, up to (but not including) the next heading of the same or lower value as the one which preceded it. For example: if you include a table of contents comment after an \u0060h2\u0060 heading, it will include all the \u0060h3\u0060, \u0060h4\u0060, etc. headings which follow, but stop when it reaches an \u0060h2\u0060 or \u0060h1\u0060. This allows you to create tables of contents for sub-sections of a document.\r\n\r\n## HTML attributes\r\n\r\nAn \u0060id\u0060, \u0060class\u0060, and other arbitrary attributes can easily be added to any HTML element using compact markdown syntax.\r\n\r\nSee [the Markdig GenericAttribute documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/GenericAttributesSpecs.md).\r\n\r\n## Heading auto-identifiers\r\n\r\nAll headings automatically receive an \u0060id\u0060 attribute for easy fragment linking.\r\n\r\nSee [the Markdig AutoIdentifier documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AutoIdentifierSpecs.md).\r\n\r\n# Transclusions\r\n\r\nThe contents of a wiki article can be included in another by enclosing its title in double curly brackets. For example, the welcome message at the top of this page was included with this syntax: \u0060{{Welcome}}\u0060.\r\n\r\nThe default namespace for transclusions is usually different from the standard default namespace. Keep that in mind when creating articles which you expect to be mainly used for transclusions, or when transcluding anything.\r\n\r\nIt is also possible to pass parameters to a transcluded article by adding them after pipe characters. For instance, \u0060{{Welcome|param}}\u0060 passes the value \u0022param\u0022 as a parameter. In the transcluded article, parameters may be referenced by a number in parenthesis, such as \u0060(1)\u0060 (which refers to the first parameter).\r\n\r\nYou can also name parameters. For example, \u0060{{Welcome|value=1}}\u0060 passes the value \u00221\u0022 as a parameter with the name \u0022value\u0022. You can use a named parameter by placing its name in parenthesis, such as \u0060(value)\u0060.\r\n\r\nIf you mix named and unnamed parameters, the numbering only includes unnamed parameters. For example, in \u0060{{Welcome|value=1|param}}\u0060 the parameter \u0022param\u0022 would be referred to as \u0060(1)\u0060 even though it\u0027s second in the list, because it\u0027s the first *unnamed* parameter.\r\n\r\n## Functions\r\n\r\nYou can also use certain keywords in double curly brackets, called functions.\r\n\r\n### Eval\r\n\r\nThe \u0060eval\u0060 function allows you to evaluate a JavaScript expression. The \u0022code\u0022 parameter, or the first unnamed parameter if no parameter is named \u0022code\u0022, should contain a JavaScript expression (something which would be valid after a \u0060return\u0060 keyword).\r\n\r\nYou can pass in any number of other parameters. Named parameters will become available in the scope of your JavaScript expression by the same names. Unnamed parameters will be available in a map object with the name \u0060args\u0060, using the parameter numbers as (\u0060string\u0060) indexes.\r\n\r\nNumeric parameters will be available as type \u0060number\u0060, true/false will be available as \u0060boolean\u0060, and parameters which can be parsed as a date/time will be available as \u0060Date\u0060 objects. All other parameters will be \u0060string\u0060 values.\r\n\r\nFor example, \u0060{{eval|Math.pow(x, 3)|x=2}}\u0060 will be replaced by \u00228\u0022.\r\n\r\n### Exec\r\n\r\nThe \u0060exec\u0060 function is similar to \u0060eval\u0060, but can be more convenient for complex scripts. Instead of writing JavaScript inline, you can write your JavaScript code in a separate article in the script namespace, then use the name of that article as the first paramater (or a parameter named \u0022code\u0022).\r\n\r\nUnlike \u0060eval\u0060 the result of your code is not automatically returned. If your \u0060exec\u0060 function should be replaced by a value, you must include your own return statement.\r\n\r\n### Format\r\n\r\nThe \u0060format\u0060 function accepts two parameters: a value and a format string. The value should either be numeric, or parsable as a date/time value. The format string can be anything understood as a [.NET format specifier](https://learn.microsoft.com/en-us/dotnet/standard/base-types/formatting-types), either standard or custom. The function will be replaced by the value in the given format.\r\n\r\n### Full Page Name\r\n\r\nThe \u0060fullpagename\u0060 function will be replaced by the complete title of the currently viewed page (no matter how many levels deep the transclusion originally appears), including domain and namespace if they are not the default.\r\n\r\n### If\r\n\r\nThe \u0060if\u0060 function accepts no less than two and up to three parameters. The first parameter should be either \u0022true\u0022, \u0022false\u0022, or a number. \u0022True\u0022 and numbers greater than zero cause the function to be replaced by the second parameter. \u0022False\u0022 or numbers less than or equal to zero cause the function to be replaced by the third parameter if it\u0027s present, or to be completely removed if not.\r\n\r\n### If Category\r\n\r\nThe \u0060ifcategory\u0060 function is replaced by its first parameter if the currently viewed page (no matter how many levels deep the transclusion originally appears) is a category. If not, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### If Equal\r\n\r\nThe \u0060ifeq\u0060 function accepts no less than three and up to four parameters. If the first and second parameters are the same, the function is replaced by the third parameter. Otherwise the function is replaced by the fourth parameter if it\u0027s present, or completely removed if not.\r\n\r\nSameness is determined based on the type of the parameters. If they are exactly the same string, they are the same. If they are both numeric values, they are the same if the difference between them is no more than 10^-15^ (this tolerance minimizes problems due to [[w:Floating-point_error_mitigation|floating-point error]]).\r\n\r\n### If Not Template\r\n\r\nThe \u0060ifnottemplate\u0060 function is replaced by its first parameter when viewed directly on an article page. When it is part of an article that is being transcluded in another page, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### If Talk\r\n\r\nThe \u0060iftalk\u0060 function is replaced by its first parameter when it is shown on a talk page. When it is viewed anywhere else, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### If Template\r\n\r\nThe \u0060iftemplate\u0060 function is replaced by its first parameter when it is part of an article that is being transcluded in another page. When it is viewed directly on an article page, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### Namespace\r\n\r\nThe \u0060namespace\u0060 function is replaced by the namespace of the currently viewed page (no matter how many levels deep the transclusion originally appears).\r\n\r\n### No TOC\r\n\r\nThe \u0060notoc\u0060 function is replaced by \u0060\u003C!-- NOTOC --\u003E\u0060, which suppresses the default table of contents.\r\n\r\nIt is usually better to use the HTML comment directly, since this avoids the extra processing of a transclusion, but the function can sometimes be helpful when the HTML comment would cause formatting issues.\r\n\r\n### Pad Left\r\n\r\nThe \u0060padleft\u0060 function accepts at least two and up to three parameters. The first is a value which is to be padded. The second parameter is the total number of characters which should appear in the final string. The third (optional) parameter is the padding character, which defaults to \u00270\u0027 if unspecified.\r\n\r\nThe function will be replaced by a string with at least the specified length that includes the first parameter, and as many leading characters as necessary to reach the desired length. For example, \u0060{{padleft|5|4}}\u0060 will result in \u00220005\u0022.\r\n\r\n### Pad Right\r\n\r\nThe \u0060padright\u0060 function accepts at least two and up to three parameters. The first is a value which is to be padded. The second parameter is the total number of characters which should appear in the final string. The third (optional) parameter is the padding character, which defaults to \u00270\u0027 if unspecified.\r\n\r\nThe function will be replaced by a string with at least the specified length that includes the first parameter, and as many trailing characters as necessary to reach the desired length. For example, \u0060{{padright|5|4}}\u0060 will result in \u00225000\u0022.\r\n\r\n### Page Name\r\n\r\nThe \u0060pagename\u0060 function is replaced by the title of the currently viewed page (no matter how many levels deep the transclusion originally appears), not including any domain or namespace.\r\n\r\n### Preview\r\n\r\nThe \u0060preview\u0060 function is replaced by its first parameter only in the preview version of the article. The preview version is shown in tooltips when hovering over a link, and in some Talk messages.\r\n\r\n### TOC\r\n\r\nThe \u0060toc\u0060 function is replaced by \u0060\u003C!-- TOC --\u003E\u0060, which places a table of contents. It accepts up to three parameters, which correspond to the three values normally used in that comment: depth, start, and title. Depth and start should be either numbers or the \u0027*\u0027 character. \r\n\r\nIt is usually better to use the HTML comment directly, since this avoids the extra processing of a transclusion, but the function can sometimes be helpful when the HTML comment would cause formatting issues.\r\n\r\n### To Lower\r\n\r\nThe \u0060tolower\u0060 function is replaced by its first parameter, converted to all lower case.\r\n\r\n### To Title Case\r\n\r\nThe \u0060totitlecase\u0060 function is replaced by its first parameter, where the first character is converted to upper case, and the rest of the characters are unchanged.\r\n\r\n### To Upper\r\n\r\nThe \u0060toupper\u0060 function is replaced by its first parameter, converted to all upper case.\r\n\r\n# Redirect\r\n\r\nThere is another function-like construct which can be used to create an automatic redirect from one wiki page to another.\r\n\r\nIf \u0060{{redirect|Title}}\u0060 appears at the very beginning of a page\u0027s content, the page will become a redirect to the \u0022Title\u0022 page. When the redirect page is requested, it will fetch the page whose full title matches the parameter after the pipe in the redirect directive, and display that page to the user instead. The title parameter may include a namespace, and/or a domain.\r\n\r\nWhen a page is \u0022renamed,\u0022 in reality a new page is created with the new name, and the original page is automatically revised to contain a redirect to the new page. This prevents users from encountering an unexpected \u0022page not found\u0022 when following a link to the original page.\r\n\r\nThe target of a redirect may also contain its own redirect. The wiki will follow any number of redirects until it finds a non-redirect page to display. However, this is not ideal for performance. It is better for each page to redirect directly to the final page which should be displayed to users.\r\n\r\nIf a redirect\u0027s title parameter refers to a page which does not exist, the redirect page itself *will* be displayed to the user (rather than indicating that a page is missing). In this situation, the rredirect directive will be visible to the user, to plainly indicate what has gone wrong.\r\n\r\nNo leading spaces or other content may appear before a redirect directive. Otherwise it will simply be displayed like normal text content.\r\n\r\nOn the other hand, content *may* appear *after* a redirect directive, which will not affect the redirect in any way.\r\n\r\n[[Category:Help pages]]",
      "Preview": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E syntax is a custom flavor of markdown. It implements all the features of \u003Ca href=\u0022http://commonmark.org\u0022\u003ECommonMark\u003C/a\u003E, as well as many others. Tavenem.Wiki uses \u003Ca href=\u0022https://github.com/lunet-io/markdig\u0022\u003EMarkdig\u003C/a\u003E to parse and format markdown, and the details of most extensions to standard CommonMark will be found on \u003Ca href=\u0022https://github.com/lunet-io/markdig\u0022\u003Eits GitHub page\u003C/a\u003E.\u003C/p\u003E\n",
      "WikiLinks": [
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Main",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Main",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Main",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Main",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Main",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Syntax",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Help",
          "WikiNamespace": "System"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Help",
          "WikiNamespace": "System"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Help",
          "WikiNamespace": "System"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Syntax",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": false,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Syntax",
          "WikiNamespace": "Wiki"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": true,
          "IsNamespaceEscaped": true,
          "IsTalk": false,
          "Title": "Help pages",
          "WikiNamespace": "Category"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": true,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Help pages",
          "WikiNamespace": "Category"
        }
      ]
    },
    {
      "$type": ":Article:",
      "id": "9855d72e-9c15-44c3-aec0-4684bddf7156",
      "AllowedEditorGroups": null,
      "AllowedEditors": null,
      "AllowedViewerGroups": null,
      "AllowedViewers": null,
      "Categories": [
        "System pages",
        "Help pages"
      ],
      "Domain": null,
      "IsBrokenRedirect": false,
      "IsDeleted": false,
      "IsDoubleRedirect": false,
      "Owner": null,
      "RedirectDomain": null,
      "RedirectNamespace": null,
      "RedirectTitle": null,
      "TimestampTicks": 638034363738950000,
      "Title": "Help",
      "Transclusions": [
        {
          "Domain": null,
          "Title": "Welcome",
          "WikiNamespace": "Transclusion"
        }
      ],
      "WikiNamespace": "System",
      "Html": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cdiv class=\u0022toc\u0022 role=\u0022navigation\u0022\u003E\n   \u003Ch2 class=\u0022toc-title\u0022\u003EContents\u003C/h2\u003E\n   \u003Cul\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#installation\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E1\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EInstallation\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n      \u003Cli\u003E\u003Ca href=\u0022#configuration\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E2\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EConfiguration\u003C/span\u003E\u003C/a\u003E\n         \u003Cul\u003E\n            \u003Cli\u003E\u003Ca href=\u0022#the-client-app\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E2.1\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EThe Client App\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n            \u003Cli\u003E\u003Ca href=\u0022#the-server-app\u0022\u003E\u003Cspan class=\u0022toc-number\u0022\u003E2.2\u003C/span\u003E\u003Cspan class=\u0022toc-heading\u0022\u003EThe Server App\u003C/span\u003E\u003C/a\u003E\u003C/li\u003E\n         \u003C/ul\u003E\n      \u003C/li\u003E\n   \u003C/ul\u003E\n\u003C/div\u003E\n\u003Cp\u003EThis page will help you to get a \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E instance up and running.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ca href=\u0022https://github.com/Tavenem/Wiki.Blazor\u0022\u003ETavenem.Wiki.Blazor\u003C/a\u003E project is comprised of a pair of \u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/razor-pages/ui-class\u0022\u003ERazor class libraries\u003C/a\u003E: a \u003Cstrong\u003EClient\u003C/strong\u003E library which can be included in a Blazor client app, and a \u003Cstrong\u003EServer\u003C/strong\u003E library which can be included in an \u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core\u0022\u003EASP.NET Core\u003C/a\u003E host project. Working together, this \u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly#hosted-deployment-with-aspnet-core\u0022\u003Ehosted Blazor project\u003C/a\u003E will function as a complete wiki.\u003C/p\u003E\n\u003Cp\u003EIt is also possible to use only the client library, and provide your own implementation for the server library. Its source code could easily be adapted to integrate more closely with your main server project, or reimagined as a cloud-native set of functions and APIs, or replaced by any number of other implementations.\u003C/p\u003E\n\u003Cp\u003EIt is also possible to use the client library \u201Coffline\u201D by providing direct access to wiki data, without the need for any back-end at all. This sample does this with an in-memory data store (obviously not suited to production use, since the data is not persisted anywhere). Your own implementation, however, could persist information locally on the client, whether in browser storage or the local filesystem. This model could be used to build personal wiki apps, where all information is kept private.\u003C/p\u003E\n\u003Ch1 id=\u0022installation\u0022\u003EInstallation\u003C/h1\u003E\n\u003Cp\u003ETavenem.Wiki.Blazor is available as a pair of \u003Ca href=\u0022https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Client/\u0022\u003ENuGet\u003C/a\u003E \u003Ca href=\u0022https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Server/\u0022\u003Epackages\u003C/a\u003E: one for \u003Ca href=\u0022https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Client/\u0022\u003Ethe client library\u003C/a\u003E, and one for \u003Ca href=\u0022https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Server/\u0022\u003Ethe server library\u003C/a\u003E.\u003C/p\u003E\n\u003Cp\u003EThe client package should be installed in your Blazor client app, and the server library can optionally be installed in your host app.\u003C/p\u003E\n\u003Ch1 id=\u0022configuration\u0022\u003EConfiguration\u003C/h1\u003E\n\u003Cp\u003EIn order to use Tavenem.Wiki.Blazor, the following steps should be taken:\u003C/p\u003E\n\u003Ch2 id=\u0022the-client-app\u0022\u003EThe Client App\u003C/h2\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003ECall one of the overloads of \u003Ccode\u003EAddTavenemWikiClient\u003C/code\u003E on an \u003Ccode\u003EIServiceCollection\u003C/code\u003E instance in your \u003Ccode\u003EProgram.cs\u003C/code\u003E file.\u003C/p\u003E\n\u003Cp\u003EFor example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.Services.AddTavenemWikiClient();\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003E\u003Ccode\u003EAddTavenemWikiClient\u003C/code\u003E has three optional parameters.\u003C/p\u003E\n\u003Cp\u003EThe first parameter is either an instance of \u003Ccode\u003EWikiOptions\u003C/code\u003E or a function which provides one. This\ninterface allows you to configure the wiki\u0027s core features. See the README for\n\u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E for more information.\u003C/p\u003E\n\u003Cp\u003EThe second parameter is either an instance of \u003Ccode\u003EWikiBlazorClientOptions\u003C/code\u003E or a function which provides one.\nThis interface allows you to configure the wiki\u0027s Blazor implementation features, and includes the\nfollowing properties:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EAppBar\u003C/code\u003E: The type of an optional component (typically containing an \u003Ca href=\u0022https://tavenem.com/Blazor.Framework/components/appbar\u0022\u003EAppBar\u003C/a\u003E from the \u003Ca href=\u0022https://tavenem.com/Blazor.Framework/\u0022\u003ETavenem Blazor Framework\u003C/a\u003E) which will appear at the top of wiki pages.\u003C/p\u003E\n\u003Cp\u003EThe type must implement \u003Ccode\u003EIComponent\u003C/code\u003E.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EArticleFrontMatter\u003C/code\u003E and \u003Ccode\u003EArticleEndMatter\u003C/code\u003E: these can be set to functions which accept an\n\u003Ccode\u003EArticle\u003C/code\u003E parameter and should return type of a component which should be displayed before or\nafter the content of the given wiki article (before the category list), or null if no additional\ncomponent should be displayed.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ECanEditOffline\u003C/code\u003E: Can be set to a function which determines whether content may be edited locally.\u003C/p\u003E\n\u003Cp\u003EIf this function is not defined, no content may be edited locally (i.e. local content may only be viewed).\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ECompactLayout\u003C/code\u003E: The type of layout used when requesting a compact version of a wiki page. Wiki pages will be nested within this layout.\u003C/p\u003E\n\u003Cp\u003EIf omitted, a default layout will be used.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ECompactRouteHostPart\u003C/code\u003E: The host part which will be recognized as indicating a request for the\ncompact version of the wiki.\u003C/p\u003E\n\u003Cp\u003EIf left empty the compact view cannot be reached at a particular host path.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ECompactRouteHostPosition\u003C/code\u003E: The position (zero-based) within the parts of the host string which\nwill be examined to determine a request for the compact version of the wiki.\u003C/p\u003E\n\u003Cp\u003EIf left null position zero will be assumed.\u003C/p\u003E\n\u003Cp\u003EOnly used when \u003Ccode\u003ECompactRouteHostPart\u003C/code\u003E is non-empty.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ECompactRoutePort\u003C/code\u003E: The port which will be recognized as indicating a request for the compact\nversion of the wiki.\u003C/p\u003E\n\u003Cp\u003EIf left null the compact view cannot be reached at a particular port.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EDataStore\u003C/code\u003E: An optional data store which the client can access directly (i.e. without reaching the server).\u003C/p\u003E\n\u003Cp\u003EIf the \u003Ccode\u003EWikiServerApiRoute\u003C/code\u003E has also been defined, the client will try to reach the server\nfirst for all wiki operations. If the server cannot be reached or the requested content is\nunavailable at the server, the client will fall back to the local data store.\u003C/p\u003E\n\u003Cp\u003EIf both the server and the local data store are unavailable, the wiki will remain operational,\nbut will show no content and will not allow any content to be added.\u003C/p\u003E\n\u003Cp\u003ENo automatic synchronization occurs from the local data store to the server (for instance when\nan offline client reestablishes network connectivity). If your app model requires\nsynchronization of offline content to a server, that logic must be implemented separately.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EIsOfflineDomain\u003C/code\u003E: A function which determines whether the given domain should always be\nretrieved from the local \u003Ccode\u003EDataStore\u003C/code\u003E, and never from the \u003Ccode\u003EWikiServerApiRoute\u003C/code\u003E.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ELoginPath\u003C/code\u003E: The relative path to the site\u0027s login page.\u003C/p\u003E\n\u003Cp\u003EFor security reasons, only a local path is permitted. If your authentication mechanisms are\nhandled externally, this should point to a local page which redirects to that source (either\nautomatically or via interaction).\u003C/p\u003E\n\u003Cp\u003EA query parameter with the name \u201CreturnUrl\u201D whose value is set to the page which initiated the\nlogic request will be appended to this URL (if provided). Your login page may ignore this\nparameter, but to improve user experience it should redirect the user back to this URL after\nperforming a successful login. Be sure to validate that the value of the parameter is from a\nlegitimate source to avoid exploits.\u003C/p\u003E\n\u003Cp\u003EIf this option is omitted, a generic \u201Cnot signed in\u201D message will be displayed whenever a user\nwho is not logged in attempts any action which requires an account.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EMainLayout\u003C/code\u003E: The type of the main layout for the wiki. Wiki pages will be nested within this layout.\u003C/p\u003E\n\u003Cp\u003EIf omitted, a default layout will be used.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ETalkHubRoute\u003C/code\u003E: The relative path to the\n\u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction\u0022\u003ESignalR\u003C/a\u003E\n\u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs\u0022\u003EHub\u003C/a\u003E used for discussion pages. If\nomitted, live chat is disabled for talk pages.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ETenorAPIKey\u003C/code\u003E: The API key to be used for \u003Ca href=\u0022https://tenor.com\u0022\u003ETenor\u003C/a\u003E GIF integration. If\nomitted, discussion pages will not have built-in GIF functionality.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EWikiServerApiRoute\u003C/code\u003E: The relative URL of the wiki\u0027s server API.\u003C/p\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe third parameter to \u003Ccode\u003EAddTavenemWikiClient\u003C/code\u003E is either an instance of \u003Ccode\u003EISearchClient\u003C/code\u003E, the\n\u003Ccode\u003EType\u003C/code\u003E of an implementation, or a function which provides one. This service provides search\ncapabilities when using the local data source. If omitted, an instance of \u003Ccode\u003EDefaultSearchClient\u003C/code\u003E\nwill be used.\u003C/p\u003E\n\u003Cp\u003ENote: the \u003Ccode\u003EDefaultSearchClient\u003C/code\u003E is not recommended for production use. It is provided only to\nensure that basic search functionality operates when an implementation of \u003Ccode\u003EISearchClient\u003C/code\u003E is not\navailable (e.g. during debugging if the production client cannot be used during development).\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003EAdd a page with the following content to your client:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003E@page \u0022/wiki/{*route}\u0022\n\u0026lt;Wiki /\u0026gt;\n\n@code {\n    [Parameter] public string? Route { get; set; }\n}\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EReplace \u201Cwiki\u201D in the page route with your preferred wiki route prefix (which should match what your configure in your \u003Ccode\u003EWikiOptions\u003C/code\u003E instance).\u003C/p\u003E\n\u003Cp\u003EThis page will handle requests for wiki pages.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E(Optional) In your main \u003Ccode\u003EApp.razor\u003C/code\u003E component, place a \u003Ccode\u003EWiki\u003C/code\u003E component in the \u003Ccode\u003ENotFound\u003C/code\u003E content slot of your \u003Ccode\u003ERouter\u003C/code\u003E component. This will allow the wiki to handle requests for unrecognized routes (i.e. users who do not add your wiki prefix to a typed URL will still get to the expected page). Routes which do not match wiki content will display an \u201Carticle not found\u201D wiki page.\u003C/p\u003E\n\u003Cp\u003EIf you prefer not to handle unrecognized routes as requests for wiki pages, this step can be skipped.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003EIn your \u003Ccode\u003Eindex.html\u003C/code\u003E page, add the following content to the \u003Ccode\u003Ehead\u003C/code\u003E section:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-html\u0022\u003E\u0026lt;link href=\u0022https://fonts.googleapis.com/css2?family=Encode\u002BSans\u002BSC:wdth,wght@75,100..900\u0026amp;family=Recursive:slnt,wght,CASL,MONO@-15..0,300..1000,0..1,0..1\u0026amp;display=swap\u0022 rel=\u0022stylesheet\u0022\u0026gt;\n\u0026lt;link href=\u0022https://fonts.googleapis.com/icon?family=Material\u002BIcons|Material\u002BIcons\u002BOutlined\u0022 rel=\u0022stylesheet\u0022\u0026gt;\n\u0026lt;link href=\u0022_content/Tavenem.Blazor.Framework/framework.css\u0022 rel=\u0022stylesheet\u0022\u0026gt;\n\u0026lt;link href=\u0022_content/Tavenem.Wiki.Blazor.Client/wiki.css\u0022 rel=\u0022stylesheet\u0022\u0026gt;\n\u0026lt;link href=\u0022_content/Tavenem.Wiki.Blazor.Client/Tavenem.Wiki.Blazor.Client.bundle.scp.css\u0022 rel=\u0022stylesheet\u0022\u0026gt;\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis adds \u003Ccode\u003ETavenem.Wiki.Blazor\u003C/code\u003E styles, and dependency styles for the \u003Ca href=\u0022https://tavenem.com/Blazor.Framework/\u0022\u003ETavenem Blazor\nFramework\u003C/a\u003E. The font choices can be adapted to suit your\nneeds. See the Tavenem Blazor Framework documentation for details.\u003C/p\u003E\n\u003C/li\u003E\n\u003C/ol\u003E\n\u003Ch2 id=\u0022the-server-app\u0022\u003EThe Server App\u003C/h2\u003E\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003E(Optional) Call \u003Ccode\u003EAddWikiJsonContext\u003C/code\u003E on an \u003Ccode\u003EIServiceCollection\u003C/code\u003E instance in your \u003Ccode\u003EProgram.cs\u003C/code\u003E\nfile. This configures the \u003Ccode\u003EJsonOptions\u003C/code\u003E for MVC with the \u003Ccode\u003EWikiBlazorJsonSerializerContext\u003C/code\u003E source\ngererated serializer context. It also adds\n\u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction\u0022\u003ESignalR\u003C/a\u003E, configures the JSON\nprotocol to use the same \u003Ccode\u003EWikiBlazorJsonSerializerContext\u003C/code\u003E, and adds response compression.\u003C/p\u003E\n\u003Cp\u003EThis is an optional step. If you wish to provide your own JSON serializer context (or not), you should call \u003Ccode\u003EAddSignalR\u003C/code\u003E directly, and optionally call \u003Ccode\u003EAddResponseCompression\u003C/code\u003E.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003ECall one of the overloads of \u003Ccode\u003EAddWiki\u003C/code\u003E on an \u003Ccode\u003EIServiceCollection\u003C/code\u003E instance in your \u003Ccode\u003EProgram.cs\u003C/code\u003E\nfile. \u003Ccode\u003EAddWiki\u003C/code\u003E has two required parameters and four optional parameters.\u003C/p\u003E\n\u003Cp\u003EThe first parameter is either an instance of \u003Ccode\u003EIWikiUserManager\u003C/code\u003E, or the type of an implementation\nof that interface which is available via dependency injection, or a function which provides one.\nThis interface allows the wiki to get information about users. Typically this will be a wrapper\naround your actual user persistence mechanism (e.g. \u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity\u0022\u003EASP.NET Core\nIdentity\u003C/a\u003E).\u003C/p\u003E\n\u003Cp\u003EThe second parameter is either an instance of \u003Ccode\u003EIWikiGroupManager\u003C/code\u003E, or the type of an\nimplementation of that interface which is available via dependency injection, or a function which\nprovides one. This interface allows the wiki to get information about user groups. Typically this\nwill be a wrapper around your actual user group persistence mechanism.\u003C/p\u003E\n\u003Cp\u003EThe next parameter is either an instance of \u003Ccode\u003EWikiOptions\u003C/code\u003E or a function which provides one.\nThis interface allows you to configure the wiki\u0027s core features. See the README for\n\u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E for more information.\u003C/p\u003E\n\u003Cp\u003EThe next parameter is either an instance of \u003Ccode\u003EIWikiBlazorServerOptions\u003C/code\u003E or a function which\nprovides one. This interface allows you to configure the wiki\u0027s Blazor implementation features,\nand includes the following properties:\u003C/p\u003E\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EDomainArchivePermission\u003C/code\u003E: The minimum permission the user must have in order to create an\narchive of a domain.\u003C/p\u003E\n\u003Cp\u003EThis property does not apply when creating an archive for content without a domain, or for the\nentire wiki.\u003C/p\u003E\n\u003Cp\u003ESince it would be prohibitive to check individual pages\u0027 permission, archiving only requires\nthat a user has this level of permission (defaults to Read) for the target domain. This could\nrepresent a potential security breach, if individual pages within the domain are further\nrestricted. It is strongly recommended that the ability to create archives is restricted in\nyour client code in a manner specific to your implementation\u0027s use of domains, which guarantees\nthat only those with the correct permissions can create archives.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ELoginPath\u003C/code\u003E: The relative path to the site\u0027s login page.\u003C/p\u003E\n\u003Cp\u003EFor security reasons, only a local path is permitted. If your authentication mechanisms are\nhandled externally, this should point to a local page which redirects to that source (either\nautomatically or via interaction).\u003C/p\u003E\n\u003Cp\u003EA query parameter with the name \u201CreturnUrl\u201D whose value is set to the page which initiated the\nlogic request will be appended to this URL (if provided). Your login page may ignore this\nparameter, but to improve user experience it should redirect the user back to this URL after\nperforming a successful login. Be sure to validate that the value of the parameter is from a\nlegitimate source to avoid exploits.\u003C/p\u003E\n\u003Cp\u003EIf this option is omitted, a generic \u201Cnot signed in\u201D message will be displayed whenever a user\nwho is not logged in attempts any action which requires an account.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003ETalkHubRoute\u003C/code\u003E: The relative path to the\n\u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction\u0022\u003ESignalR\u003C/a\u003E\n\u003Ca href=\u0022https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs\u0022\u003EHub\u003C/a\u003E used for discussion pages. If\nomitted, the path \u201C/wikiTalkHub\u201D will be used.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ccode\u003EWikiServerApiRoute\u003C/code\u003E: The relative URL of the wiki\u0027s server API.\u003C/p\u003E\n\u003Cp\u003EIf omitted, the path \u201C/wikiapi\u201D will be used.\u003C/p\u003E\n\u003C/li\u003E\n\u003C/ul\u003E\n\u003Cp\u003EThe next parameter is either an instance of \u003Ccode\u003EIFileManager\u003C/code\u003E, or the type of an implementation of\nthat interface which is available via dependency injection, or a function which provides one. If\nomitted, an instance of \u003Ccode\u003ELocalFileManager\u003C/code\u003E will be used, which stores files in a subfolder of\nwwwroot.\u003C/p\u003E\n\u003Cp\u003EThe next parameter is either an instance of \u003Ccode\u003EISearchClient\u003C/code\u003E, or the type of an implementation\nof that interface which is available via dependency injection, or a function which provides one.\nIf omitted, an instance of \u003Ccode\u003EDefaultSearchClient\u003C/code\u003E will be used.\u003C/p\u003E\n\u003Cp\u003ENote: the \u003Ccode\u003EDefaultSearchClient\u003C/code\u003E is not recommended for production use. It is provided only to\nensure that basic search functionality operates when an implementation of \u003Ccode\u003EISearchClient\u003C/code\u003E is not\navailable (e.g. during debugging if the production client cannot be used during development).\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003ECall \u003Ccode\u003EUseResponseCompression\u003C/code\u003E on an \u003Ccode\u003EIApplicationBuilder\u003C/code\u003E instance in your \u003Ccode\u003EProgram.cs\u003C/code\u003E file. This should normally only be done if you called \u003Ccode\u003EAddWikiJsonContext\u003C/code\u003E or if you called \u003Ccode\u003EAddResponseCompression\u003C/code\u003E directly.\u003C/p\u003E\n\u003C/li\u003E\n\u003Cli\u003E\u003Cp\u003ECall \u003Ccode\u003EMapWiki\u003C/code\u003E on an \u003Ccode\u003EIEndpointRouteBuilder\u003C/code\u003E instance in your \u003Ccode\u003EProgram.cs\u003C/code\u003E file.\u003C/p\u003E\n\u003Cp\u003EFor example:\u003C/p\u003E\n\u003Cpre\u003E\u003Ccode class=\u0022language-csharp\u0022\u003Evar builder = WebAssemblyHostBuilder.CreateDefault(args);\nvar app = builder.Build();\napp.MapWiki();\n\u003C/code\u003E\u003C/pre\u003E\n\u003Cp\u003EThis call should normally precede any other mapped endpoints.\u003C/p\u003E\n\u003C/li\u003E\n\u003C/ol\u003E\n\u003Cp\u003E\n\u003C/p\u003E\n",
      "MarkdownContent": "{{Welcome}}\n\nThis page will help you to get a [Tavenem.Wiki](https://github.com/Tavenem/Wiki) instance up and running.\n\nThe [Tavenem.Wiki.Blazor](https://github.com/Tavenem/Wiki.Blazor) project is comprised of a pair of [Razor class libraries](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/ui-class): a **Client** library which can be included in a Blazor client app, and a **Server** library which can be included in an [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core) host project. Working together, this [hosted Blazor project](https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly#hosted-deployment-with-aspnet-core) will function as a complete wiki.\n\nIt is also possible to use only the client library, and provide your own implementation for the server library. Its source code could easily be adapted to integrate more closely with your main server project, or reimagined as a cloud-native set of functions and APIs, or replaced by any number of other implementations.\n\nIt is also possible to use the client library \u0022offline\u0022 by providing direct access to wiki data, without the need for any back-end at all. This sample does this with an in-memory data store (obviously not suited to production use, since the data is not persisted anywhere). Your own implementation, however, could persist information locally on the client, whether in browser storage or the local filesystem. This model could be used to build personal wiki apps, where all information is kept private.\n\n# Installation\n\nTavenem.Wiki.Blazor is available as a pair of [NuGet](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Client/) [packages](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Server/): one for [the client library](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Client/), and one for [the server library](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Server/).\n\nThe client package should be installed in your Blazor client app, and the server library can optionally be installed in your host app.\n\n# Configuration\n\nIn order to use Tavenem.Wiki.Blazor, the following steps should be taken:\n\n## The Client App\n\n1. Call one of the overloads of \u0060AddTavenemWikiClient\u0060 on an \u0060IServiceCollection\u0060 instance in your \u0060Program.cs\u0060 file.\n\n   For example:\n\n   \u0060\u0060\u0060csharp\n   var builder = WebAssemblyHostBuilder.CreateDefault(args);\n   builder.Services.AddTavenemWikiClient();\n   \u0060\u0060\u0060\n\n   \u0060AddTavenemWikiClient\u0060 has three optional parameters.\n\n   The first parameter is either an instance of \u0060WikiOptions\u0060 or a function which provides one. This\n   interface allows you to configure the wiki\u0027s core features. See the README for\n   [Tavenem.Wiki](https://github.com/Tavenem/Wiki) for more information.\n\n   The second parameter is either an instance of \u0060WikiBlazorClientOptions\u0060 or a function which provides one.\n   This interface allows you to configure the wiki\u0027s Blazor implementation features, and includes the\n   following properties:\n\n   * \u0060AppBar\u0060: The type of an optional component (typically containing an [AppBar](https://tavenem.com/Blazor.Framework/components/appbar) from the [Tavenem Blazor Framework](https://tavenem.com/Blazor.Framework/)) which will appear at the top of wiki pages.\n\n     The type must implement \u0060IComponent\u0060.\n\n   * \u0060ArticleFrontMatter\u0060 and \u0060ArticleEndMatter\u0060: these can be set to functions which accept an\n     \u0060Article\u0060 parameter and should return type of a component which should be displayed before or\n     after the content of the given wiki article (before the category list), or null if no additional\n     component should be displayed.\n\n   * \u0060CanEditOffline\u0060: Can be set to a function which determines whether content may be edited locally.\n\n     If this function is not defined, no content may be edited locally (i.e. local content may only be viewed).\n\n   * \u0060CompactLayout\u0060: The type of layout used when requesting a compact version of a wiki page. Wiki pages will be nested within this layout.\n\n     If omitted, a default layout will be used.\n\n   * \u0060CompactRouteHostPart\u0060: The host part which will be recognized as indicating a request for the\n     compact version of the wiki.\n\n     If left empty the compact view cannot be reached at a particular host path.\n\n   * \u0060CompactRouteHostPosition\u0060: The position (zero-based) within the parts of the host string which\n     will be examined to determine a request for the compact version of the wiki.\n\n     If left null position zero will be assumed.\n\n     Only used when \u0060CompactRouteHostPart\u0060 is non-empty.\n\n   * \u0060CompactRoutePort\u0060: The port which will be recognized as indicating a request for the compact\n     version of the wiki.\n\n     If left null the compact view cannot be reached at a particular port.\n\n   * \u0060DataStore\u0060: An optional data store which the client can access directly (i.e. without reaching the server).\n\n     If the \u0060WikiServerApiRoute\u0060 has also been defined, the client will try to reach the server\n     first for all wiki operations. If the server cannot be reached or the requested content is\n     unavailable at the server, the client will fall back to the local data store.\n\n     If both the server and the local data store are unavailable, the wiki will remain operational,\n     but will show no content and will not allow any content to be added.\n\n     No automatic synchronization occurs from the local data store to the server (for instance when\n     an offline client reestablishes network connectivity). If your app model requires\n     synchronization of offline content to a server, that logic must be implemented separately.\n\n   * \u0060IsOfflineDomain\u0060: A function which determines whether the given domain should always be\n     retrieved from the local \u0060DataStore\u0060, and never from the \u0060WikiServerApiRoute\u0060.\n\n   * \u0060LoginPath\u0060: The relative path to the site\u0027s login page.\n\n     For security reasons, only a local path is permitted. If your authentication mechanisms are\n     handled externally, this should point to a local page which redirects to that source (either\n     automatically or via interaction).\n\n     A query parameter with the name \u0022returnUrl\u0022 whose value is set to the page which initiated the\n     logic request will be appended to this URL (if provided). Your login page may ignore this\n     parameter, but to improve user experience it should redirect the user back to this URL after\n     performing a successful login. Be sure to validate that the value of the parameter is from a\n     legitimate source to avoid exploits.\n\n     If this option is omitted, a generic \u0022not signed in\u0022 message will be displayed whenever a user\n     who is not logged in attempts any action which requires an account.\n\n   * \u0060MainLayout\u0060: The type of the main layout for the wiki. Wiki pages will be nested within this layout.\n\n     If omitted, a default layout will be used.\n\n   * \u0060TalkHubRoute\u0060: The relative path to the\n     [SignalR](https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction)\n     [Hub](https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs) used for discussion pages. If\n     omitted, live chat is disabled for talk pages.\n\n   * \u0060TenorAPIKey\u0060: The API key to be used for [Tenor](https://tenor.com) GIF integration. If\n     omitted, discussion pages will not have built-in GIF functionality.\n\n   * \u0060WikiServerApiRoute\u0060: The relative URL of the wiki\u0027s server API.\n\n   The third parameter to \u0060AddTavenemWikiClient\u0060 is either an instance of \u0060ISearchClient\u0060, the\n   \u0060Type\u0060 of an implementation, or a function which provides one. This service provides search\n   capabilities when using the local data source. If omitted, an instance of \u0060DefaultSearchClient\u0060\n   will be used.\n\n   Note: the \u0060DefaultSearchClient\u0060 is not recommended for production use. It is provided only to\n   ensure that basic search functionality operates when an implementation of \u0060ISearchClient\u0060 is not\n   available (e.g. during debugging if the production client cannot be used during development).\n\n2. Add a page with the following content to your client:\n\n   \u0060\u0060\u0060csharp\n   @page \u0022/wiki/{*route}\u0022\n   \u003CWiki /\u003E\n   \n   @code {\n       [Parameter] public string? Route { get; set; }\n   }\n   \u0060\u0060\u0060\n\n   Replace \u0022wiki\u0022 in the page route with your preferred wiki route prefix (which should match what your configure in your \u0060WikiOptions\u0060 instance).\n\n   This page will handle requests for wiki pages.\n\n3. (Optional) In your main \u0060App.razor\u0060 component, place a \u0060Wiki\u0060 component in the \u0060NotFound\u0060 content slot of your \u0060Router\u0060 component. This will allow the wiki to handle requests for unrecognized routes (i.e. users who do not add your wiki prefix to a typed URL will still get to the expected page). Routes which do not match wiki content will display an \u0022article not found\u0022 wiki page.\n\n   If you prefer not to handle unrecognized routes as requests for wiki pages, this step can be skipped.\n\n4. In your \u0060index.html\u0060 page, add the following content to the \u0060head\u0060 section:\n\n   \u0060\u0060\u0060html\n   \u003Clink href=\u0022https://fonts.googleapis.com/css2?family=Encode\u002BSans\u002BSC:wdth,wght@75,100..900\u0026family=Recursive:slnt,wght,CASL,MONO@-15..0,300..1000,0..1,0..1\u0026display=swap\u0022 rel=\u0022stylesheet\u0022\u003E\n   \u003Clink href=\u0022https://fonts.googleapis.com/icon?family=Material\u002BIcons|Material\u002BIcons\u002BOutlined\u0022 rel=\u0022stylesheet\u0022\u003E\n   \u003Clink href=\u0022_content/Tavenem.Blazor.Framework/framework.css\u0022 rel=\u0022stylesheet\u0022\u003E\n   \u003Clink href=\u0022_content/Tavenem.Wiki.Blazor.Client/wiki.css\u0022 rel=\u0022stylesheet\u0022\u003E\n   \u003Clink href=\u0022_content/Tavenem.Wiki.Blazor.Client/Tavenem.Wiki.Blazor.Client.bundle.scp.css\u0022 rel=\u0022stylesheet\u0022\u003E\n   \u0060\u0060\u0060\n\n   This adds \u0060Tavenem.Wiki.Blazor\u0060 styles, and dependency styles for the [Tavenem Blazor\n   Framework](https://tavenem.com/Blazor.Framework/). The font choices can be adapted to suit your\n   needs. See the Tavenem Blazor Framework documentation for details.\n\n## The Server App\n\n1. (Optional) Call \u0060AddWikiJsonContext\u0060 on an \u0060IServiceCollection\u0060 instance in your \u0060Program.cs\u0060\n   file. This configures the \u0060JsonOptions\u0060 for MVC with the \u0060WikiBlazorJsonSerializerContext\u0060 source\n   gererated serializer context. It also adds\n   [SignalR](https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction), configures the JSON\n   protocol to use the same \u0060WikiBlazorJsonSerializerContext\u0060, and adds response compression.\n\n   This is an optional step. If you wish to provide your own JSON serializer context (or not), you should call \u0060AddSignalR\u0060 directly, and optionally call \u0060AddResponseCompression\u0060.\n\n2. Call one of the overloads of \u0060AddWiki\u0060 on an \u0060IServiceCollection\u0060 instance in your \u0060Program.cs\u0060\n   file. \u0060AddWiki\u0060 has two required parameters and four optional parameters.\n\n   The first parameter is either an instance of \u0060IWikiUserManager\u0060, or the type of an implementation\n   of that interface which is available via dependency injection, or a function which provides one.\n   This interface allows the wiki to get information about users. Typically this will be a wrapper\n   around your actual user persistence mechanism (e.g. [ASP.NET Core\n   Identity](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity)).\n\n   The second parameter is either an instance of \u0060IWikiGroupManager\u0060, or the type of an\n   implementation of that interface which is available via dependency injection, or a function which\n   provides one. This interface allows the wiki to get information about user groups. Typically this\n   will be a wrapper around your actual user group persistence mechanism.\n\n   The next parameter is either an instance of \u0060WikiOptions\u0060 or a function which provides one.\n   This interface allows you to configure the wiki\u0027s core features. See the README for\n   [Tavenem.Wiki](https://github.com/Tavenem/Wiki) for more information.\n\n   The next parameter is either an instance of \u0060IWikiBlazorServerOptions\u0060 or a function which\n   provides one. This interface allows you to configure the wiki\u0027s Blazor implementation features,\n   and includes the following properties:\n\n   * \u0060DomainArchivePermission\u0060: The minimum permission the user must have in order to create an\n     archive of a domain.\n   \n     This property does not apply when creating an archive for content without a domain, or for the\n     entire wiki.\n     \n     Since it would be prohibitive to check individual pages\u0027 permission, archiving only requires\n     that a user has this level of permission (defaults to Read) for the target domain. This could\n     represent a potential security breach, if individual pages within the domain are further\n     restricted. It is strongly recommended that the ability to create archives is restricted in\n     your client code in a manner specific to your implementation\u0027s use of domains, which guarantees\n     that only those with the correct permissions can create archives.\n\n   * \u0060LoginPath\u0060: The relative path to the site\u0027s login page.\n\n     For security reasons, only a local path is permitted. If your authentication mechanisms are\n     handled externally, this should point to a local page which redirects to that source (either\n     automatically or via interaction).\n\n     A query parameter with the name \u0022returnUrl\u0022 whose value is set to the page which initiated the\n     logic request will be appended to this URL (if provided). Your login page may ignore this\n     parameter, but to improve user experience it should redirect the user back to this URL after\n     performing a successful login. Be sure to validate that the value of the parameter is from a\n     legitimate source to avoid exploits.\n\n     If this option is omitted, a generic \u0022not signed in\u0022 message will be displayed whenever a user\n     who is not logged in attempts any action which requires an account.\n\n   * \u0060TalkHubRoute\u0060: The relative path to the\n     [SignalR](https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction)\n     [Hub](https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs) used for discussion pages. If\n     omitted, the path \u0022/wikiTalkHub\u0022 will be used.\n\n   * \u0060WikiServerApiRoute\u0060: The relative URL of the wiki\u0027s server API.\n\n     If omitted, the path \u0022/wikiapi\u0022 will be used.\n\n   The next parameter is either an instance of \u0060IFileManager\u0060, or the type of an implementation of\n   that interface which is available via dependency injection, or a function which provides one. If\n   omitted, an instance of \u0060LocalFileManager\u0060 will be used, which stores files in a subfolder of\n   wwwroot.\n\n   The next parameter is either an instance of \u0060ISearchClient\u0060, or the type of an implementation\n   of that interface which is available via dependency injection, or a function which provides one.\n   If omitted, an instance of \u0060DefaultSearchClient\u0060 will be used.\n\n   Note: the \u0060DefaultSearchClient\u0060 is not recommended for production use. It is provided only to\n   ensure that basic search functionality operates when an implementation of \u0060ISearchClient\u0060 is not\n   available (e.g. during debugging if the production client cannot be used during development).\n\n4. Call \u0060UseResponseCompression\u0060 on an \u0060IApplicationBuilder\u0060 instance in your \u0060Program.cs\u0060 file. This should normally only be done if you called \u0060AddWikiJsonContext\u0060 or if you called \u0060AddResponseCompression\u0060 directly.\n\n5. Call \u0060MapWiki\u0060 on an \u0060IEndpointRouteBuilder\u0060 instance in your \u0060Program.cs\u0060 file.\n\n   For example:\n\n   \u0060\u0060\u0060csharp\n   var builder = WebAssemblyHostBuilder.CreateDefault(args);\n   var app = builder.Build();\n   app.MapWiki();\n   \u0060\u0060\u0060\n\n   This call should normally precede any other mapped endpoints.\n\n[[Category:System pages]]\n[[Category:Help pages]]",
      "Preview": "\u003Cp\u003EWelcome to the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample.\u003C/p\u003E\n\u003Cp\u003EThis page will help you to get a \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E instance up and running.\u003C/p\u003E\n",
      "WikiLinks": [
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": true,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "System pages",
          "WikiNamespace": "Category"
        },
        {
          "Domain": null,
          "Missing": false,
          "IsCategory": true,
          "IsNamespaceEscaped": false,
          "IsTalk": false,
          "Title": "Help pages",
          "WikiNamespace": "Category"
        }
      ]
    },
    {
      "$type": ":Article:Category:",
      "id": "f7035491-51cf-4285-aeb3-11ff28e964a8",
      "ChildIds": [
        "496d70c1-b539-499e-bcbc-c5fa7e7e8e2b",
        "995978eb-80da-4b2a-88c0-98173a839aa4",
        "d91a6abc-1273-444d-bede-b8dd974690bf",
        "9855d72e-9c15-44c3-aec0-4684bddf7156"
      ],
      "AllowedEditorGroups": null,
      "AllowedEditors": null,
      "AllowedViewerGroups": null,
      "AllowedViewers": null,
      "Categories": [],
      "Domain": null,
      "IsBrokenRedirect": false,
      "IsDeleted": false,
      "IsDoubleRedirect": false,
      "Owner": null,
      "RedirectDomain": null,
      "RedirectNamespace": null,
      "RedirectTitle": null,
      "TimestampTicks": 638031934422680000,
      "Title": "System pages",
      "Transclusions": [],
      "WikiNamespace": "Category",
      "Html": "\u003Cp\u003EThese are system pages in the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample \u003Ca href=\u0022https://wikipedia.org/wiki/Wiki\u0022\u003Ewiki\u003C/a\u003E.\u003C/p\u003E\n",
      "MarkdownContent": "These are system pages in the [Tavenem.Wiki](https://github.com/Tavenem/Wiki) sample [[w:Wiki||]].",
      "Preview": "\u003Cp\u003EThese are system pages in the \u003Ca href=\u0022https://github.com/Tavenem/Wiki\u0022\u003ETavenem.Wiki\u003C/a\u003E sample \u003Ca href=\u0022https://wikipedia.org/wiki/Wiki\u0022\u003Ewiki\u003C/a\u003E.\u003C/p\u003E\n",
      "WikiLinks": []
    },
    {
      "$type": ":Article:Category:",
      "id": "3915da76-559c-4732-a64a-1296cf384e2d",
      "ChildIds": [
        "9855d72e-9c15-44c3-aec0-4684bddf7156",
        "d70e2bb6-7db0-42a2-8578-5bc7bdbb1f1a"
      ],
      "AllowedEditorGroups": null,
      "AllowedEditors": [
        "c6798a76-7831-4675-959b-2951566ef068"
      ],
      "AllowedViewerGroups": null,
      "AllowedViewers": null,
      "Categories": [],
      "Domain": null,
      "IsBrokenRedirect": false,
      "IsDeleted": false,
      "IsDoubleRedirect": false,
      "Owner": "c6798a76-7831-4675-959b-2951566ef068",
      "RedirectDomain": null,
      "RedirectNamespace": null,
      "RedirectTitle": null,
      "TimestampTicks": 638031934393770000,
      "Title": "Help pages",
      "Transclusions": [],
      "WikiNamespace": "Category",
      "Html": "",
      "MarkdownContent": "",
      "Preview": "",
      "WikiLinks": []
    }
  ],
  "Revisions": [
    {
      "$type": ":Revision:",
      "id": "cc8898b8-3507-4df0-9eec-e7236d2d5fa6",
      "Comment": null,
      "Delta": null,
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": false,
      "TimestampTicks": 638031934384200000,
      "Title": "System pages",
      "WikiId": "f7035491-51cf-4285-aeb3-11ff28e964a8",
      "WikiNamespace": "Category"
    },
    {
      "$type": ":Revision:",
      "id": "80a99a7b-4422-40b5-ada0-443fdb69961a",
      "Comment": null,
      "Delta": "Welcome to the [Tavenem.Wiki](https://github.com/Tavenem/Wiki) sample.\r\n\r\n{{ifnottemplate|[[Category:System pages]]}}",
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": true,
      "TimestampTicks": 638031934383460000,
      "Title": "Welcome",
      "WikiId": "496d70c1-b539-499e-bcbc-c5fa7e7e8e2b",
      "WikiNamespace": "Transclusion"
    },
    {
      "$type": ":Revision:",
      "id": "496cc419-811c-4e98-b1a9-64c2d5e831f2",
      "Comment": null,
      "Delta": "{{Welcome}}\r\n\r\nThe [Tavenem.Wiki](https://github.com/Tavenem/Wiki) package is a [.NET](https://dotnet.microsoft.com) [[w:Wiki||]] library.\r\n\r\nUnlike many wiki implementations, the main package (\u0060Tavenem.Wiki\u0060) is implementation-agnostic. It provides a set of core features which can be used to build a web-based wiki, a desktop application, a distributed cloud app with native clients, or any other architecture desired.\r\n\r\nThis implementation ([Tavenem.Wiki.Blazor](https://github.com/Tavenem/Wiki.Blazor)) is a [Razor class library](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/ui-class) which can be included in any [Blazor](https://docs.microsoft.com/en-us/aspnet/core/blazor) project to add wiki capabilities to that project.\r\n\r\nSee the [[System:Help|]] or [[System:About|]] pages for more information.\r\n\r\n[[Category:System pages]]",
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": true,
      "TimestampTicks": 638031934387610000,
      "Title": "Main",
      "WikiId": "995978eb-80da-4b2a-88c0-98173a839aa4",
      "WikiNamespace": "Wiki"
    },
    {
      "$type": ":Revision:",
      "id": "42b90fb9-e997-474a-9bf3-d320766adbd8",
      "Comment": null,
      "Delta": "\u003C!-- TOC 1 --\u003E\r\n{{Welcome}}\r\n\r\nThe [Tavenem.Wiki](https://github.com/Tavenem/Wiki) package is a [.NET](https://dotnet.microsoft.com) [[w:Wiki||]] library.\r\n\r\n# Markup\r\nThe Tavenem Wiki syntax is a custom flavor of markdown. It implements all the features of [CommonMark](http://commonmark.org), as well as many others. See the [[Syntax]] page for details.\r\n\r\n# Categories\r\n\r\nEach page in a Tavenem Wiki can be assigned to any number of categories by placing a [[Syntax#Wiki links|wiki link]] to that category anywhere on the page. A link to a category is invisible when viewing the page; pages have a predefined section which lists all their categories.\r\n\r\nCategories may also be assigned to other categories, by placing a category link on the category\u0027s own page. It should be noted, however, that no strict hierarchy of categories is enforced. It is entirely possible to create \u0022loops\u0022 of category references, or categories which belong to multiple, unrelated parent categories.\r\n\r\n# Namespaces\r\n\r\nEvery page on a Tavenem Wiki belongs to a namespace. For example, this page is in the \u0022System\u0022 namespace. There is a default namespace (called \u0022Wiki\u0022 unless you customize it) which can be omitted in titles and links, and won\u0027t normally be displayed.\r\n\r\nPages in the same namespace can\u0027t have the same title, in order to tall them apart. Pages in different namespaces, however, *can* have the same title.\r\n\r\n# Domains\r\n\r\nA page doesn\u0027t need to belong to a domain, but it may. A domain is a little like a \u0022higher-level\u0022 namespace.\r\n\r\nOne possible use for domains is for each registered user of a wiki to have their own personal domain (named for their user ID). This domain can be used to save \u0022draft\u0022 copies of pages from the main wiki, where the duplicate namespace and title won\u0027t conflict with the \u0022real\u0022 page. This use is supported by Tavenem.Wiki.Blazor unless disabled. \u0022Save Draft,\u0022 \u0022Restore Draft,\u0022 and \u0022Discard Draft\u0022 buttons when editing, without requiring the user to know anything about the details of domains.\r\n\r\nAnother possible use for domains is to allow a single wiki instance to host multiple \u0022sub-wikis\u0022 on different topics, where each one might contain pages with the same namespace and title, without conflicts. The advantage of this approach over entirely separate wikis is that each sub-wiki would be able to refer to pages in other wikis with simple [[Syntax#Wiki links||]], rather than full URLs.\r\n\r\n# History\r\n\r\nEach page keeps a record of its history of revisions, along with the editor who made that change.\r\n\r\n# Access Control\r\n\r\nEach page in a Tavenem Wiki may be subject to various forms of access control.\r\n\r\n## Owner\r\n\r\nAny page in a wiki can have an owner. A page can also have no owner.\r\n\r\nWhen a page does have an owner, only the owner may delete or rename the page.\r\n\r\nOnly a page owner may set other types of access control for that page. An unowned page cannot be assigned any other type of access control. Only the page owner can reassign the page\u0027s ownership, or make it unowned.\r\n\r\nA page owner can be either an individual user, or a user group. When a group owns a page, any member of the group can delete, rename, or change the access controls for the page.\r\n\r\n## Allowed editors\r\n\r\nBy default, wiki pages may be edited by any registered user (anonymous users may not make edits). However, the owner of a page may assign a specific list of users or groups with permission to edit a page.\r\n\r\nThe owner of a page can also specify that *nobody* may edit a page, other than the owner (the owner is always allowed to edit their owned page).\r\n\r\nIt is also possible to assign a list of editable pages directly to a user or group.\r\n\r\nA user\u0027s effective permission to edit a page is determined by a combination of the page\u0027s list of allowed editors, and the user\u0027s own list of editable pages. This allows your wiki implementation to manage permission either on pages, on users/groups, or a combination of both.\r\n\r\n## Allowed viewers\r\n\r\nBy default, wiki pages may be viewed by anyone, even anonymous users. However, the owner of a page may assign a specific list of users or groups with permission to view a page.\r\n\r\nThe owner of a page can also specify that *nobody* may view a page, other than the owner (the owner is always allowed to view their owned page).\r\n\r\nIt is also possible to assign a list of viewable pages directly to a user or group.\r\n\r\nA user\u0027s effective permission to view a page is determined by a combination of the page\u0027s list of allowed viewers, and the user\u0027s own list of viewable pages. This allows your wiki implementation to manage permission either on pages, on users/groups, or a combination of both.\r\n\r\n## Allowed domains\r\n\r\nA user or group can also be assigned a list of domains in which they are allowed to view or edit pages (viewing and editing are maintained as separate lists).\r\n\r\nThis permission establishes default access for the domain, but is superceded by access controls set on individual pages within the domain.\r\n\r\nSee the [[System:Help|]] page for usage information.\r\n\r\n[[Category:System pages]]",
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": true,
      "TimestampTicks": 638031934388650000,
      "Title": "About",
      "WikiId": "d91a6abc-1273-444d-bede-b8dd974690bf",
      "WikiNamespace": "System"
    },
    {
      "$type": ":Revision:",
      "id": "6059ca2a-778e-4871-b4f8-c41543623e8e",
      "Comment": null,
      "Delta": null,
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": false,
      "TimestampTicks": 638031934393770000,
      "Title": "Help pages",
      "WikiId": "3915da76-559c-4732-a64a-1296cf384e2d",
      "WikiNamespace": "Category"
    },
    {
      "$type": ":Revision:",
      "id": "3400a25f-ec25-40ea-80c8-2c4c2707aaa6",
      "Comment": null,
      "Delta": "{{Welcome}}\r\n\r\nThis page will help you to get a [Tavenem.Wiki](https://github.com/Tavenem/Wiki) instance up and running.\r\n\r\nThe [Tavenem.Wiki.Blazor](https://github.com/Tavenem/Wiki.Blazor) project is comprised of a pair of [Razor class libraries](https://docs.microsoft.com/en-us/aspnet/core/razor-pages/ui-class): a **Client** library which can be included in a Blazor client app, and a **Server** library which can be included in an [ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core) host project. Working together, this [hosted Blazor project](https://docs.microsoft.com/en-us/aspnet/core/blazor/host-and-deploy/webassembly#hosted-deployment-with-aspnet-core) will function as a complete wiki.\r\n\r\nIt is also possible to use only the client library, and provide your own implementation for the server library. Its source code could easily be adapted to integrate more closely with your main server project, or reimagined as a cloud-native set of functions and APIs, or replaced by any number of other implementations.\r\n\r\nIt is also possible to use the client library \u0022offline\u0022 by providing direct access to wiki data, without the need for any back-end at all. This sample does this with an in-memory data store (obviously not suited to production use, since the data is not persisted anywhere). Your own implementation, however, could persist information locally on the client, whether in browser storage or the local filesystem. This model could be used to build personal wiki apps, where all information is kept private.\r\n\r\n# Installation\r\n\r\nTavenem.Wiki.Blazor is available as a pair of [NuGet](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Client/) [packages](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Server/): one for [the client library](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Client/), and one for [the server library](https://www.nuget.org/packages/Tavenem.Wiki.Blazor.Server/).\r\n\r\nThe client package should be installed in your Blazor client app, and the server library can optionally be installed in your host app.\r\n\r\n# Configuration\r\n\r\nIn order to use Tavenem.Wiki.Blazor, the following steps should be taken:\r\n\r\n## The Client App\r\n\r\n1. Call one of the overloads of \u0060AddTavenemWikiClient\u0060 on an \u0060IServiceCollection\u0060 instance in your \u0060Program.cs\u0060 file.\r\n\r\n    For example:\r\n    \u0060\u0060\u0060csharp\r\n    var builder = WebAssemblyHostBuilder.CreateDefault(args);\r\n    builder.Services.AddTavenemWikiClient();\r\n    \u0060\u0060\u0060\r\n\r\n   \u0060AddTavenemWikiClient\u0060 has three optional parameters.\r\n\r\n   The first parameter is either an instance of \u0060WikiOptions\u0060 or a function which provides one. This\r\n   interface allows you to configure the wiki\u0027s core features. See the README for\r\n   [Tavenem.Wiki](https://github.com/Tavenem/Wiki) for more information.\r\n   \r\n   The second parameter is either an instance of \u0060WikiBlazorClientOptions\u0060 or a function which provides one.\r\n   This interface allows you to configure the wiki\u0027s Blazor implementation features, and includes the\r\n   following properties:\r\n   - \u0060AppBar\u0060: The type of an optional component (typically containing an [AppBar](https://tavenem.com/Blazor.Framework/components/appbar) from the [Tavenem Blazor Framework](https://tavenem.com/Blazor.Framework/)) which will appear at the top of wiki pages.\r\n   \r\n     The type must implement \u0060IComponent\u0060.\r\n   - \u0060ArticleFrontMatter\u0060 and \u0060ArticleEndMatter\u0060: these can be set to functions which accept an\r\n   \u0060Article\u0060 parameter and should return type of a component which should be displayed before or\r\n   after the content of the given wiki article (before the category list), or null if no additional\r\n   component should be displayed.\r\n   - \u0060CanEditOffline\u0060: Can be set to a function which determines whether content may be edited locally.\r\n\r\n     If this function is not defined, no content may be edited locally (i.e. local content may only be viewed).\r\n   - \u0060CompactLayout\u0060: The type of layout used when requesting a compact version of a wiki page. Wiki pages will be nested within this layout.\r\n   \r\n     If omitted, a default layout will be used.\r\n   - \u0060CompactRouteHostPart\u0060: The host part which will be recognized as indicating a request for the\r\n     compact version of the wiki.\r\n\r\n     If left empty the compact view cannot be reached at a particular host path.\r\n   - \u0060CompactRouteHostPosition\u0060: The position (zero-based) within the parts of the host string which\r\n     will be examined to determine a request for the compact version of the wiki.\r\n\r\n     If left null position zero will be assumed.\r\n\r\n     Only used when \u0060CompactRouteHostPart\u0060 is non-empty.\r\n   - \u0060CompactRoutePort\u0060: The port which will be recognized as indicating a request for the compact\r\n     version of the wiki.\r\n\r\n     If left null the compact view cannot be reached at a particular port.\r\n   - \u0060DataStore\u0060: An optional data store which the client can access directly (i.e. without reaching the server).\r\n\r\n     If the \u0060WikiServerApiRoute\u0060 has also been defined, the client will try to reach the server\r\n     first for all wiki operations. If the server cannot be reached or the requested content is\r\n     unavailable at the server, the client will fall back to the local data store.\r\n\r\n     If both the server and the local data store are unavailable, the wiki will remain operational,\r\n     but will show no content and will not allow any content to be added.\r\n\r\n     No automatic synchronization occurs from the local data store to the server (for instance when\r\n     an offline client reestablishes network connectivity). If your app model requires\r\n     synchronization of offline content to a server, that logic must be implemented separately.\r\n   - \u0060IsOfflineDomain\u0060: A function which determines whether the given domain should always be\r\n     retrieved from the local \u0060DataStore\u0060, and never from the \u0060WikiServerApiRoute\u0060.\r\n   - \u0060LoginPath\u0060: The relative path to the site\u0027s login page.\r\n     \r\n     For security reasons, only a local path is permitted. If your authentication mechanisms are\r\n     handled externally, this should point to a local page which redirects to that source (either\r\n     automatically or via interaction).\r\n   \r\n     A query parameter with the name \u0022returnUrl\u0022 whose value is set to the page which initiated the\r\n     logic request will be appended to this URL (if provided). Your login page may ignore this\r\n     parameter, but to improve user experience it should redirect the user back to this URL after\r\n     performing a successful login. Be sure to validate that the value of the parameter is from a\r\n     legitimate source to avoid exploits.\r\n   \r\n     If this option is omitted, a generic \u0022not signed in\u0022 message will be displayed whenever a user\r\n     who is not logged in attempts any action which requires an account.\r\n   - \u0060MainLayout\u0060: The type of the main layout for the wiki. Wiki pages will be nested within this layout.\r\n   \r\n     If omitted, a default layout will be used.\r\n   - \u0060TalkHubRoute\u0060: The relative path to the\r\n     [SignalR](https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction)\r\n     [Hub](https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs) used for discussion pages. If\r\n     omitted, live chat is disabled for talk pages.\r\n   - \u0060TenorAPIKey\u0060: The API key to be used for [Tenor](https://tenor.com) GIF integration. If\r\n     omitted, discussion pages will not have built-in GIF functionality.\r\n   - \u0060WikiServerApiRoute\u0060: The relative URL of the wiki\u0027s server API.\r\n\r\n   The third parameter to \u0060AddTavenemWikiClient\u0060 is either an instance of \u0060ISearchClient\u0060, the\r\n   \u0060Type\u0060 of an implementation, or a function which provides one. This service provides search\r\n   capabilities when using the local data source. If omitted, an instance of \u0060DefaultSearchClient\u0060\r\n   will be used.\r\n     \r\n   Note: the \u0060DefaultSearchClient\u0060 is not recommended for production use. It is provided only to\r\n   ensure that basic search functionality operates when an implementation of \u0060ISearchClient\u0060 is not\r\n   available (e.g. during debugging if the production client cannot be used during development).\r\n1. Add a page with the following content to your client:\r\n   \u0060\u0060\u0060csharp\r\n   @page \u0022/wiki/{*route}\u0022\r\n   \u003CWiki /\u003E\r\n\r\n   @code {\r\n       [Parameter] public string? Route { get; set; }\r\n   }\r\n   \u0060\u0060\u0060\r\n   Replace \u0022wiki\u0022 in the page route with your preferred wiki route prefix (which should match what your configure in your \u0060WikiOptions\u0060 instance).\r\n\r\n   This page will handle requests for wiki pages.\r\n1. (Optional) In your main \u0060App.razor\u0060 component, place a \u0060Wiki\u0060 component in the \u0060NotFound\u0060 content slot of your \u0060Router\u0060 component. This will allow the wiki to handle requests for unrecognized routes (i.e. users who do not add your wiki prefix to a typed URL will still get to the expected page). Routes which do not match wiki content will display an \u0022article not found\u0022 wiki page.\r\n\r\n   If you prefer not to handle unrecognized routes as requests for wiki pages, this step can be skipped.\r\n1. In your \u0060index.html\u0060 page, add the following content to the \u0060head\u0060 section:\r\n   \u0060\u0060\u0060html\r\n   \u003Clink href=\u0022https://fonts.googleapis.com/css2?family=Encode\u002BSans\u002BSC:wdth,wght@75,100..900\u0026family=Recursive:slnt,wght,CASL,MONO@-15..0,300..1000,0..1,0..1\u0026display=swap\u0022 rel=\u0022stylesheet\u0022\u003E\r\n   \u003Clink href=\u0022https://fonts.googleapis.com/icon?family=Material\u002BIcons|Material\u002BIcons\u002BOutlined\u0022 rel=\u0022stylesheet\u0022\u003E\r\n   \u003Clink href=\u0022_content/Tavenem.Blazor.Framework/framework.css\u0022 rel=\u0022stylesheet\u0022\u003E\r\n   \u003Clink href=\u0022_content/Tavenem.Wiki.Blazor.Client/wiki.css\u0022 rel=\u0022stylesheet\u0022\u003E\r\n   \u003Clink href=\u0022_content/Tavenem.Wiki.Blazor.Client/Tavenem.Wiki.Blazor.Client.bundle.scp.css\u0022 rel=\u0022stylesheet\u0022\u003E\r\n   \u0060\u0060\u0060\r\n   This adds \u0060Tavenem.Wiki.Blazor\u0060 styles, and dependency styles for the [Tavenem Blazor\r\n   Framework](https://tavenem.com/Blazor.Framework/). The font choices can be adapted to suit your\r\n   needs. See the Tavenem Blazor Framework documentation for details.\r\n\r\n## The Server App\r\n\r\n1. (Optional) Call \u0060AddWikiJsonContext\u0060 on an \u0060IServiceCollection\u0060 instance in your \u0060Program.cs\u0060\r\n   file. This configures the \u0060JsonOptions\u0060 for MVC with the \u0060WikiBlazorJsonSerializerContext\u0060 source\r\n   gererated serializer context. It also adds\r\n   [SignalR](https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction), configures the JSON\r\n   protocol to use the same \u0060WikiBlazorJsonSerializerContext\u0060, and adds response compression.\r\n\r\n   This is an optional step. If you wish to provide your own JSON serializer context (or not), you should call \u0060AddSignalR\u0060 directly, and optionally call \u0060AddResponseCompression\u0060.\r\n1. Call one of the overloads of \u0060AddWiki\u0060 on an \u0060IServiceCollection\u0060 instance in your \u0060Program.cs\u0060\r\n   file. \u0060AddWiki\u0060 has two required parameters and four optional parameters.\r\n   \r\n   The first parameter is either an instance of \u0060IWikiUserManager\u0060, or the type of an implementation\r\n   of that interface which is available via dependency injection, or a function which provides one.\r\n   This interface allows the wiki to get information about users. Typically this will be a wrapper\r\n   around your actual user persistence mechanism (e.g. [ASP.NET Core\r\n   Identity](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity)).\r\n\r\n   The second parameter is either an instance of \u0060IWikiGroupManager\u0060, or the type of an\r\n   implementation of that interface which is available via dependency injection, or a function which\r\n   provides one. This interface allows the wiki to get information about user groups. Typically this\r\n   will be a wrapper around your actual user group persistence mechanism.\r\n\r\n   The next parameter is either an instance of \u0060WikiOptions\u0060 or a function which provides one.\r\n   This interface allows you to configure the wiki\u0027s core features. See the README for\r\n   [Tavenem.Wiki](https://github.com/Tavenem/Wiki) for more information.\r\n   \r\n   The next parameter is either an instance of \u0060IWikiBlazorServerOptions\u0060 or a function which\r\n   provides one. This interface allows you to configure the wiki\u0027s Blazor implementation features,\r\n   and includes the following properties:\r\n   - \u0060LoginPath\u0060: The relative path to the site\u0027s login page.\r\n     \r\n     For security reasons, only a local path is permitted. If your authentication mechanisms are\r\n     handled externally, this should point to a local page which redirects to that source (either\r\n     automatically or via interaction).\r\n   \r\n     A query parameter with the name \u0022returnUrl\u0022 whose value is set to the page which initiated the\r\n     logic request will be appended to this URL (if provided). Your login page may ignore this\r\n     parameter, but to improve user experience it should redirect the user back to this URL after\r\n     performing a successful login. Be sure to validate that the value of the parameter is from a\r\n     legitimate source to avoid exploits.\r\n   \r\n     If this option is omitted, a generic \u0022not signed in\u0022 message will be displayed whenever a user\r\n     who is not logged in attempts any action which requires an account.\r\n   - \u0060TalkHubRoute\u0060: The relative path to the\r\n     [SignalR](https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction)\r\n     [Hub](https://docs.microsoft.com/en-us/aspnet/core/signalr/hubs) used for discussion pages. If\r\n     omitted, the path \u0022/wikiTalkHub\u0022 will be used.\r\n   - \u0060WikiServerApiRoute\u0060: The relative URL of the wiki\u0027s server API.\r\n   \r\n     If omitted, the path \u0022/wikiapi\u0022 will be used.\r\n   \r\n   The next parameter is either an instance of \u0060IFileManager\u0060, or the type of an implementation of\r\n   that interface which is available via dependency injection, or a function which provides one. If\r\n   omitted, an instance of \u0060LocalFileManager\u0060 will be used, which stores files in a subfolder of\r\n   wwwroot.\r\n   \r\n   The next parameter is either an instance of \u0060ISearchClient\u0060, or the type of an implementation\r\n   of that interface which is available via dependency injection, or a function which provides one.\r\n   If omitted, an instance of \u0060DefaultSearchClient\u0060 will be used.\r\n     \r\n   Note: the \u0060DefaultSearchClient\u0060 is not recommended for production use. It is provided only to\r\n   ensure that basic search functionality operates when an implementation of \u0060ISearchClient\u0060 is not\r\n   available (e.g. during debugging if the production client cannot be used during development).\r\n1. Call \u0060UseResponseCompression\u0060 on an \u0060IApplicationBuilder\u0060 instance in your \u0060Program.cs\u0060 file. This should normally only be done if you called \u0060AddWikiJsonContext\u0060 or if you called \u0060AddResponseCompression\u0060 directly.\r\n1. Call \u0060MapWiki\u0060 on an \u0060IEndpointRouteBuilder\u0060 instance in your \u0060Program.cs\u0060 file.\r\n\r\n   For example:\r\n   \u0060\u0060\u0060csharp\r\n   var builder = WebAssemblyHostBuilder.CreateDefault(args);\r\n   var app = builder.Build();\r\n   app.MapWiki();\r\n   \u0060\u0060\u0060\r\n   This call should normally precede any other mapped endpoints.\r\n\r\n[[Category:System pages]]\r\n[[Category:Help pages]]",
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": true,
      "TimestampTicks": 638031934392330000,
      "Title": "Help",
      "WikiId": "9855d72e-9c15-44c3-aec0-4684bddf7156",
      "WikiNamespace": "System"
    },
    {
      "$type": ":Revision:",
      "id": "4d4142ef-49c9-4d4b-b224-cde0474632e5",
      "Comment": null,
      "Delta": "\u003C!-- TOC 1 * --\u003E\r\n{{Welcome}}\r\n\r\nThe [Tavenem.Wiki](https://github.com/Tavenem/Wiki) syntax is a custom flavor of markdown. It implements all the features of [CommonMark](http://commonmark.org), as well as many others. Tavenem.Wiki uses [Markdig](https://github.com/lunet-io/markdig) to parse and format markdown, and the details of most extensions to standard CommonMark will be found on [its GitHub page](https://github.com/lunet-io/markdig).\r\n\r\n# Wiki links\r\n\r\nIn addition to standard commonmark link syntax, a shorthand can be used to link to other wiki articles.\r\n\r\nIn the simplest case, you can just put the title of an article in double square brackets to link to it. For example, \u0060[[Main]]\u0060 will create a link like this: [[Main]].\r\n\r\nLinks are not case sensitive, and will be converted to \u0022wiki title case\u0022 automatically. Wiki titles always start with an uppercase letter, but the case of the rest of the letters is unchanged. That means \u0060[[main]]\u0060 and \u0060[[Main]]\u0060 will both produce the same link, with a capital letter: [[main]].\r\n\r\nTo override the default title, you can specify a manual title for your link by including it after a pipe character. For example, \u0060[[Main|link]]\u0060 will produce a link like this: [[Main|link]].\r\n\r\nIf you just want to suppress the default capitalization and force your link to be all lowercase, you can use two pipe characters with no title. For example: \u0060[[Main||]]\u0060 will produce a link like this: [[Main||]].\r\n\r\nAny text which immediately follows a wiki link will be \u0022pulled in\u0022 to the link. For example, \u0060[[main]]\u0060land creates a link like this: [[main]]land. Most of the time, this will be helpful when you need to pluralize the text of the link (e.g. \u0060[[Syntax]]\u0060es = [[Syntax]]es).\r\n\r\nTo link to an article in a namespace, put the namespace first, then a semicolon. For example, \u0060[[System:Help]]\u0060 creates a link like this: [[System:Help]].\r\n\r\nIf you prefer not to show the namespace in your link, you can use a pipe character with a blank title to automatically strip the namespace. For example, \u0060[[System:Help|]]\u0060 creates a link like this: [[System:Help|]].\r\n\r\nThe double pipe character with no title also strips the namespace, in addition to forcing all lowercase. Either style can also be combined with extra text. For example, \u0060[[System:Help||]]\u0060ing creates a link like this: [[System:Help||]]ing.\r\n\r\n## Media links\r\n\r\nSimilarly to standard commonmark media links, a wiki link with a \u0027!\u0027 character at the beginning will embed the file rather than link to it. Note that images are floated to the right in wiki articles.\r\n\r\n## Fragment links\r\n\r\nTo link to a particular section of an article, you can use the \u0027#\u0027 character followed by the heading title. For example, \u0060[[Syntax#Wiki links]]\u0060 creates a link like this: [[Syntax#Wiki links]].\r\n\r\nNote: if the section is within the same article, you can technically omit the article title to create a local link. However, in a Blazor app this will not function as expected due to the \u0060base href\u0060 value set on the client.\r\n\r\nIf you use the pipe character with no title, the \u0027#\u0027 character will be replaced by a paragraph indicator. For example, \u0060[[Syntax#Wiki links|]]\u0060 creates a link like this: [[Syntax#Wiki links|]]. The double pipe, as usual, has the same effect but also forces all lowercase.\r\n\r\n## Category links\r\n\r\nNote that placing a wiki link to a category does not create a link to that category. Instead, it categorizes the article in which the link appears as a member of the linked category. When you intend to create a visible link to a category, and *not* categorize the article, you should prefix the link with an additional semicolon. For example, \u0060[[:Category:Help pages]]\u0060 creates a link like this: [[:Category:Help pages]].\r\n\r\n## Wikipedia links\r\n\r\nTo easily link to an article on [Wikipedia](https://www.wikipedia.org/), you can use the prefix \u0060w:\u0060 followed by the title of the article. For example, \u0060[[w:Wiki]]\u0060 creates a link like this: [[w:Wiki]].\r\n\r\n## Wikimedia Commons links\r\n\r\nTo easily link to a file on [Wikimedia Commons](https://commons.wikimedia.org/), you can use the prefix \u0060cc:\u0060 followed by the name of the file. A \u0027!\u0027 character will embed the file, rather than link to it. For example, \u0060![[cc:Example.jpg]]\u0060 embeds the image seen to the side of this section. ![[cc:Example.jpg]] The format of the generated image and link may fulfill the attrtibution requirements of many Wikimedia Commons files, but you should always check the specific requirements of any file you link.\r\n\r\n# Extended markdown syntax\r\n\r\n## Abbreviations\r\n\r\nSee [the Markdig Abbreviation documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AbbreviationSpecs.md).\r\n\r\n## Citations\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md#cite).\r\n\r\n## Definition lists\r\n\r\nSee [the Markdig DefinitionList documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/DefinitionListSpecs.md).\r\n\r\n## Divs\r\n\r\nSee [the Markdig CustomContainer documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/CustomContainerSpecs.md).\r\n\r\n## Figures\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md).\r\n\r\n## Footers\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FigureFooterAndCiteSpecs.md#footers).\r\n\r\n## Footnotes\r\n\r\nSee [the Markdig Cite documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/FootnotesSpecs.md).\r\n\r\n## Inserted text\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#inserted).\r\n\r\n## Marked text\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#marked).\r\n\r\n## Math\r\n\r\nSee [the Markdig Math documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/MathSpecs.md).\r\n\r\n## Ordered lists with letters\r\n\r\nSee [the Markdig ListExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/ListExtraSpecs.md).\r\n\r\n## Spans\r\n\r\nSee [the Markdig CustomContainer documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/CustomContainerSpecs.md#inline-custom-container).\r\n\r\n## Strikethrough\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#strikethrough).\r\n\r\n## Superscript and subscript\r\n\r\nSee [the Markdig EmphasisExtra documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/EmphasisExtraSpecs.md#superscript-and-subscript).\r\n\r\n## Tables\r\n\r\nThere are two accepted formats for tables: pipe and grid.\r\n\r\nSee [the Markdig PipeTable documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/PipeTableSpecs.md) and [the Markdig GridTable documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/GridTableSpecs.md).\r\n\r\n## Task lists\r\n\r\nSee [the Markdig TaskList documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/TaskListSpecs.md).\r\n\r\n# Additional functionality\r\n\r\n## Auto dashes\r\n\r\nEn- and Em-dashes are automatically converted from double and triple hyphens.\r\n\r\nSee [the Markdig SmartyPants documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md#smartypants-separators).\r\n\r\n## Auto ellipses\r\n\r\nEllipses are automatically converted from triple periods.\r\n\r\nSee [the Markdig SmartyPants documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md#smartypants-separators).\r\n\r\n## Auto links\r\n\r\nURLs are automatically converted to links, without the need for markdown syntax.\r\n\r\nSee [the Markdig AutoLink documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AutoLinks.md).\r\n\r\n## Auto quotes\r\n\r\nQuotes are automatically converted to the correct HTML escape sequences based on context.\r\n\r\nSee [the Markdig SmartyPants documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/SmartyPantsSpecs.md).\r\n\r\n## Auto table of contents\r\n\r\nEvery article automatically receives a table of contents based on its headings, injected upon creation or revision.\r\n\r\nThe automatic table of contents can be suppressed by including the following HTML comment anywhere in the article: \u0060\u003C!--notoc--\u003E\u0060\r\n\r\nThe table of contents can also be customized by including a comment in the format: \u0060\u003C!-- toc (depth) (start) (title)--\u003E\u0060\r\n\r\nThe \u0060(depth)\u0060 parameter should be replaced by a number that indicates the highest level of heading that should be included. E.g. to include \u0060h3\u0060 set depth to 3. You can use the character \u0027*\u0027 to indicate that the default should be used.\r\n\r\nThe \u0060(start)\u0060 parameter should be replaced by a number that indicates the lowest level of heading that should be included. E.g. to start with \u0060h2\u0060 (and skip all \u0060h1\u0060 tags) set start to 2. Start can be omitted, but not if a title is included. You can use the character \u0027*\u0027 to indicate that the default should be used.\r\n\r\nThe \u0060(title)\u0060 parameter should be replaced by the title for the rendered table. Title can be omitted.\r\n\r\nYou can include multiple tables of contents.\r\n\r\nIf you place a table of contents comment after a heading, it will summarize all the headings with a higher number value that the preceding one, up to (but not including) the next heading of the same or lower value as the one which preceded it. For example: if you include a table of contents comment after an \u0060h2\u0060 heading, it will include all the \u0060h3\u0060, \u0060h4\u0060, etc. headings which follow, but stop when it reaches an \u0060h2\u0060 or \u0060h1\u0060. This allows you to create tables of contents for sub-sections of a document.\r\n\r\n## HTML attributes\r\n\r\nAn \u0060id\u0060, \u0060class\u0060, and other arbitrary attributes can easily be added to any HTML element using compact markdown syntax.\r\n\r\nSee [the Markdig GenericAttribute documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/GenericAttributesSpecs.md).\r\n\r\n## Heading auto-identifiers\r\n\r\nAll headings automatically receive an \u0060id\u0060 attribute for easy fragment linking.\r\n\r\nSee [the Markdig AutoIdentifier documentation](https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/AutoIdentifierSpecs.md).\r\n\r\n# Transclusions\r\n\r\nThe contents of a wiki article can be included in another by enclosing its title in double curly brackets. For example, the welcome message at the top of this page was included with this syntax: \u0060{{Welcome}}\u0060.\r\n\r\nThe default namespace for transclusions is usually different from the standard default namespace. Keep that in mind when creating articles which you expect to be mainly used for transclusions, or when transcluding anything.\r\n\r\nIt is also possible to pass parameters to a transcluded article by adding them after pipe characters. For instance, \u0060{{Welcome|param}}\u0060 passes the value \u0022param\u0022 as a parameter. In the transcluded article, parameters may be referenced by a number in parenthesis, such as \u0060(1)\u0060 (which refers to the first parameter).\r\n\r\nYou can also name parameters. For example, \u0060{{Welcome|value=1}}\u0060 passes the value \u00221\u0022 as a parameter with the name \u0022value\u0022. You can use a named parameter by placing its name in parenthesis, such as \u0060(value)\u0060.\r\n\r\nIf you mix named and unnamed parameters, the numbering only includes unnamed parameters. For example, in \u0060{{Welcome|value=1|param}}\u0060 the parameter \u0022param\u0022 would be referred to as \u0060(1)\u0060 even though it\u0027s second in the list, because it\u0027s the first *unnamed* parameter.\r\n\r\n## Functions\r\n\r\nYou can also use certain keywords in double curly brackets, called functions.\r\n\r\n### Eval\r\n\r\nThe \u0060eval\u0060 function allows you to evaluate a JavaScript expression. The \u0022code\u0022 parameter, or the first unnamed parameter if no parameter is named \u0022code\u0022, should contain a JavaScript expression (something which would be valid after a \u0060return\u0060 keyword).\r\n\r\nYou can pass in any number of other parameters. Named parameters will become available in the scope of your JavaScript expression by the same names. Unnamed parameters will be available in a map object with the name \u0060args\u0060, using the parameter numbers as (\u0060string\u0060) indexes.\r\n\r\nNumeric parameters will be available as type \u0060number\u0060, true/false will be available as \u0060boolean\u0060, and parameters which can be parsed as a date/time will be available as \u0060Date\u0060 objects. All other parameters will be \u0060string\u0060 values.\r\n\r\nFor example, \u0060{{eval|Math.pow(x, 3)|x=2}}\u0060 will be replaced by \u00228\u0022.\r\n\r\n### Exec\r\n\r\nThe \u0060exec\u0060 function is similar to \u0060eval\u0060, but can be more convenient for complex scripts. Instead of writing JavaScript inline, you can write your JavaScript code in a separate article in the script namespace, then use the name of that article as the first paramater (or a parameter named \u0022code\u0022).\r\n\r\nUnlike \u0060eval\u0060 the result of your code is not automatically returned. If your \u0060exec\u0060 function should be replaced by a value, you must include your own return statement.\r\n\r\n### Format\r\n\r\nThe \u0060format\u0060 function accepts two parameters: a value and a format string. The value should either be numeric, or parsable as a date/time value. The format string can be anything understood as a [.NET format specifier](https://learn.microsoft.com/en-us/dotnet/standard/base-types/formatting-types), either standard or custom. The function will be replaced by the value in the given format.\r\n\r\n### Full Page Name\r\n\r\nThe \u0060fullpagename\u0060 function will be replaced by the complete title of the currently viewed page (no matter how many levels deep the transclusion originally appears), including domain and namespace if they are not the default.\r\n\r\n### If\r\n\r\nThe \u0060if\u0060 function accepts no less than two and up to three parameters. The first parameter should be either \u0022true\u0022, \u0022false\u0022, or a number. \u0022True\u0022 and numbers greater than zero cause the function to be replaced by the second parameter. \u0022False\u0022 or numbers less than or equal to zero cause the function to be replaced by the third parameter if it\u0027s present, or to be completely removed if not.\r\n\r\n### If Category\r\n\r\nThe \u0060ifcategory\u0060 function is replaced by its first parameter if the currently viewed page (no matter how many levels deep the transclusion originally appears) is a category. If not, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### If Equal\r\n\r\nThe \u0060ifeq\u0060 function accepts no less than three and up to four parameters. If the first and second parameters are the same, the function is replaced by the third parameter. Otherwise the function is replaced by the fourth parameter if it\u0027s present, or completely removed if not.\r\n\r\nSameness is determined based on the type of the parameters. If they are exactly the same string, they are the same. If they are both numeric values, they are the same if the difference between them is no more than 10^-15^ (this tolerance minimizes problems due to [[w:Floating-point_error_mitigation|floating-point error]]).\r\n\r\n### If Not Template\r\n\r\nThe \u0060ifnottemplate\u0060 function is replaced by its first parameter when viewed directly on an article page. When it is part of an article that is being transcluded in another page, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### If Talk\r\n\r\nThe \u0060iftalk\u0060 function is replaced by its first parameter when it is shown on a talk page. When it is viewed anywhere else, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### If Template\r\n\r\nThe \u0060iftemplate\u0060 function is replaced by its first parameter when it is part of an article that is being transcluded in another page. When it is viewed directly on an article page, the function is replaced by the second parameter if it\u0027s present, or completely removed if not.\r\n\r\n### Namespace\r\n\r\nThe \u0060namespace\u0060 function is replaced by the namespace of the currently viewed page (no matter how many levels deep the transclusion originally appears).\r\n\r\n### No TOC\r\n\r\nThe \u0060notoc\u0060 function is replaced by \u0060\u003C!-- NOTOC --\u003E\u0060, which suppresses the default table of contents.\r\n\r\nIt is usually better to use the HTML comment directly, since this avoids the extra processing of a transclusion, but the function can sometimes be helpful when the HTML comment would cause formatting issues.\r\n\r\n### Pad Left\r\n\r\nThe \u0060padleft\u0060 function accepts at least two and up to three parameters. The first is a value which is to be padded. The second parameter is the total number of characters which should appear in the final string. The third (optional) parameter is the padding character, which defaults to \u00270\u0027 if unspecified.\r\n\r\nThe function will be replaced by a string with at least the specified length that includes the first parameter, and as many leading characters as necessary to reach the desired length. For example, \u0060{{padleft|5|4}}\u0060 will result in \u00220005\u0022.\r\n\r\n### Pad Right\r\n\r\nThe \u0060padright\u0060 function accepts at least two and up to three parameters. The first is a value which is to be padded. The second parameter is the total number of characters which should appear in the final string. The third (optional) parameter is the padding character, which defaults to \u00270\u0027 if unspecified.\r\n\r\nThe function will be replaced by a string with at least the specified length that includes the first parameter, and as many trailing characters as necessary to reach the desired length. For example, \u0060{{padright|5|4}}\u0060 will result in \u00225000\u0022.\r\n\r\n### Page Name\r\n\r\nThe \u0060pagename\u0060 function is replaced by the title of the currently viewed page (no matter how many levels deep the transclusion originally appears), not including any domain or namespace.\r\n\r\n### Preview\r\n\r\nThe \u0060preview\u0060 function is replaced by its first parameter only in the preview version of the article. The preview version is shown in tooltips when hovering over a link, and in some Talk messages.\r\n\r\n### TOC\r\n\r\nThe \u0060toc\u0060 function is replaced by \u0060\u003C!-- TOC --\u003E\u0060, which places a table of contents. It accepts up to three parameters, which correspond to the three values normally used in that comment: depth, start, and title. Depth and start should be either numbers or the \u0027*\u0027 character. \r\n\r\nIt is usually better to use the HTML comment directly, since this avoids the extra processing of a transclusion, but the function can sometimes be helpful when the HTML comment would cause formatting issues.\r\n\r\n### To Lower\r\n\r\nThe \u0060tolower\u0060 function is replaced by its first parameter, converted to all lower case.\r\n\r\n### To Title Case\r\n\r\nThe \u0060totitlecase\u0060 function is replaced by its first parameter, where the first character is converted to upper case, and the rest of the characters are unchanged.\r\n\r\n### To Upper\r\n\r\nThe \u0060toupper\u0060 function is replaced by its first parameter, converted to all upper case.\r\n\r\n# Redirect\r\n\r\nThere is another function-like construct which can be used to create an automatic redirect from one wiki page to another.\r\n\r\nIf \u0060{{redirect|Title}}\u0060 appears at the very beginning of a page\u0027s content, the page will become a redirect to the \u0022Title\u0022 page. When the redirect page is requested, it will fetch the page whose full title matches the parameter after the pipe in the redirect directive, and display that page to the user instead. The title parameter may include a namespace, and/or a domain.\r\n\r\nWhen a page is \u0022renamed,\u0022 in reality a new page is created with the new name, and the original page is automatically revised to contain a redirect to the new page. This prevents users from encountering an unexpected \u0022page not found\u0022 when following a link to the original page.\r\n\r\nThe target of a redirect may also contain its own redirect. The wiki will follow any number of redirects until it finds a non-redirect page to display. However, this is not ideal for performance. It is better for each page to redirect directly to the final page which should be displayed to users.\r\n\r\nIf a redirect\u0027s title parameter refers to a page which does not exist, the redirect page itself *will* be displayed to the user (rather than indicating that a page is missing). In this situation, the rredirect directive will be visible to the user, to plainly indicate what has gone wrong.\r\n\r\nNo leading spaces or other content may appear before a redirect directive. Otherwise it will simply be displayed like normal text content.\r\n\r\nOn the other hand, content *may* appear *after* a redirect directive, which will not affect the redirect in any way.\r\n\r\n[[Category:Help pages]]",
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": true,
      "TimestampTicks": 638031934401960000,
      "Title": "Syntax",
      "WikiId": "d70e2bb6-7db0-42a2-8578-5bc7bdbb1f1a",
      "WikiNamespace": "Wiki"
    },
    {
      "$type": ":Revision:",
      "id": "3107634c-e81d-455d-9d3d-7526d9ea14b1",
      "Comment": "Provide a description",
      "Delta": "These are system pages in the [Tavenem.Wiki](https://github.com/Tavenem/Wiki) sample [[w:Wiki||]].",
      "Domain": null,
      "Editor": "c6798a76-7831-4675-959b-2951566ef068",
      "IsDeleted": false,
      "IsMilestone": true,
      "TimestampTicks": 638031934422680000,
      "Title": "System pages",
      "WikiId": "f7035491-51cf-4285-aeb3-11ff28e964a8",
      "WikiNamespace": "Category"
    },
    {
      "$type": ":Revision:",
      "id": "680a4f37-fba7-449e-a7a1-f73ee5a9459a",
      "Comment": null,
      "Delta": "=11\t-3\t\u002B%0a\t=106\t-3\t\u002B%0a\t=584\t-3\t\u002B%0a\t=320\t-3\t\u002B%0a\t=502\t-3\t\u002B%0a\t=15\t-3\t\u002B%0a\t=370\t-3\t\u002B%0a\t=135\t-3\t\u002B%0a\t=16\t-3\t\u002B%0a\t=74\t-3\t\u002B%0a\t=18\t-3\t\u002B%0a\t=118\t-3\t\u002B%0a\t=4\t-1\t=12\t-3\t\u002B%0a%0a\t=12\t-3\t\u002B%0a\t=60\t-1\t=4\t-1\t=40\t-1\t=4\t-1\t=3\t-3\t\u002B%0a\t=57\t-3\t\u002B%0a\t=101\t-1\t=82\t-1\t=73\t-6\t\u002B%0a\t=109\t-1\t=102\t-1\t=25\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=254\t-6\t\u002B%0a\t=43\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=91\t-1\t=4\t\u002B  \t=93\t-1\t=1\t\u002B \t=3\t\u002B \t=96\t-1\t=1\t\u002B \t=3\t\u002B \t=30\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=99\t-3\t\u002B%0a\t=112\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=137\t-6\t\u002B%0a\t=48\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=95\t-1\t=34\t-3\t\u002B%0a\t=81\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=96\t-1\t=82\t-3\t\u002B%0a\t=49\t-3\t\u002B%0a\t=57\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=94\t-1\t=26\t-3\t\u002B%0a\t=75\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=109\t-3\t\u002B%0a\t=96\t-1\t=96\t-1\t=83\t-3\t\u002B%0a\t=100\t-1\t=74\t-3\t\u002B%0a\t=100\t-1\t=87\t-1\t=96\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=89\t-1\t=84\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=57\t-8\t\u002B%0a\t=97\t-1\t=98\t-1\t=40\t-6\t\u002B%0a\t=100\t-1\t=95\t-1\t=98\t-1\t=98\t-1\t=42\t-6\t\u002B%0a\t=100\t-1\t=73\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=102\t-6\t\u002B%0a\t=48\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=41\t-1\t=82\t-1\t=100\t-1\t=52\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=89\t-1\t=73\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=65\t-3\t\u002B%0a\t=95\t-1\t=95\t-1\t=99\t-1\t=17\t-8\t\u002B%0a\t=97\t-1\t=100\t-1\t=97\t-3\t\u002B%0a%0a2\t=55\t-1\t\u002B%0a\t=13\t-1\t=26\t-1\t=12\t-3\t\u002B%0a   \t=11\t-1\t=54\t-1\t=5\t-1\t=7\t-1\t\u002B%0a\t=147\t-3\t\u002B%0a\t=50\t-3\t\u002B%0a%0a3\t=383\t-3\t\u002B%0a\t=105\t-3\t\u002B%0a%0a4\t=77\t-1\t\u002B%0a\t=11\t-1\t=189\t-1\t=114\t-1\t=82\t-1\t=79\t-1\t=112\t-1\t=7\t-1\t\u002B%0a\t=89\t-1\t=99\t-1\t=70\t-3\t\u002B%0a\t=18\t-3\t\u002B%0a\t=97\t-1\t=101\t-1\t=46\t-1\t=101\t-1\t=94\t-3\t\u002B%0a\t=180\t-3\t\u002B%0a%0a2\t=97\t-1\t=77\t-6\t\u002B%0a\t=101\t-1\t=100\t-1\t=99\t-1\t=69\t-1\t=94\t-3\t\u002B%0a\t=88\t-1\t=101\t-1\t=101\t-1\t=74\t-3\t\u002B%0a\t=95\t-1\t=87\t-1\t=73\t-6\t\u002B%0a\t=94\t-1\t=99\t-1\t=42\t-1\t\u002B%0a\t=4\t-1\t\u002B* %60DomainArchivePermission%60: The minimum permission the user must have in order to create an%0a     archive of a domain.%0a   %0a     This property does not apply when creating an archive for content without a domain, or for the%0a     entire wiki.%0a     %0a     Since it would be prohibitive to check individual pages\u0027 permission, archiving only requires%0a     that a user has this level of permission (defaults to Read) for the target domain. This could%0a     represent a potential security breach, if individual pages within the domain are further%0a     restricted. It is strongly recommended that the ability to create archives is restricted in%0a     your client code in a manner specific to your implementation\u0027s use of domains, which guarantees%0a     that only those with the correct permissions can create archives.%0a%0a   *\t=57\t-8\t\u002B%0a\t=97\t-1\t=98\t-1\t=40\t-6\t\u002B%0a\t=100\t-1\t=95\t-1\t=98\t-1\t=98\t-1\t=42\t-6\t\u002B%0a\t=100\t-1\t=73\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=41\t-1\t=82\t-1\t=100\t-1\t=52\t-1\t\u002B%0a\t=4\t-1\t\u002B*\t=65\t-6\t\u002B%0a\t=51\t-6\t\u002B%0a\t=99\t-1\t=100\t-1\t=97\t-1\t=12\t-6\t\u002B%0a\t=97\t-1\t=100\t-1\t=66\t-8\t\u002B%0a\t=97\t-1\t=100\t-1\t=97\t-3\t\u002B%0a%0a4\t=216\t-3\t\u002B%0a%0a5\t=82\t-3\t\u002B%0a\t=16\t-1\t\u002B%0a\t=13\t-1\t=61\t-1\t=30\t-1\t=18\t-1\t=7\t-1\t\u002B%0a\t=65\t-3\t\u002B%0a\t=26\t-1\t=24",
      "Domain": null,
      "Editor": "a1c49540-b47e-4a33-9bcc-5f6d8c8610d1",
      "IsDeleted": false,
      "IsMilestone": false,
      "TimestampTicks": 638034363738950000,
      "Title": "Help",
      "WikiId": "9855d72e-9c15-44c3-aec0-4684bddf7156",
      "WikiNamespace": "System"
    }
  ]
}